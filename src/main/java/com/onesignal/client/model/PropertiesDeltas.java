/*
 * OneSignal
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: devrel@onesignal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onesignal.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.onesignal.client.model.Purchase;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.onesignal.client.JSON;

/**
 * PropertiesDeltas
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-01T23:27:12.168Z[Etc/UTC]")
public class PropertiesDeltas {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_SESSION_TIME = "session_time";
  @SerializedName(SERIALIZED_NAME_SESSION_TIME)
  private BigDecimal sessionTime;

  public static final String SERIALIZED_NAME_SESSION_COUNT = "session_count";
  @SerializedName(SERIALIZED_NAME_SESSION_COUNT)
  private BigDecimal sessionCount;

  public static final String SERIALIZED_NAME_PURCHASES = "purchases";
  @SerializedName(SERIALIZED_NAME_PURCHASES)
  private List<Purchase> purchases = null;

  public PropertiesDeltas() { 
  }

  public PropertiesDeltas sessionTime(BigDecimal sessionTime) {
    
    this.sessionTime = sessionTime;
    return this;
  }

   /**
   * Get sessionTime
   * @return sessionTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getSessionTime() {
    return sessionTime;
  }


  public void setSessionTime(BigDecimal sessionTime) {
    this.sessionTime = sessionTime;
  }


  public PropertiesDeltas sessionCount(BigDecimal sessionCount) {
    
    this.sessionCount = sessionCount;
    return this;
  }

   /**
   * Get sessionCount
   * @return sessionCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getSessionCount() {
    return sessionCount;
  }


  public void setSessionCount(BigDecimal sessionCount) {
    this.sessionCount = sessionCount;
  }


  public PropertiesDeltas purchases(List<Purchase> purchases) {
    
    this.purchases = purchases;
    return this;
  }

  public PropertiesDeltas addPurchasesItem(Purchase purchasesItem) {
    if (this.purchases == null) {
      this.purchases = new ArrayList<>();
    }
    this.purchases.add(purchasesItem);
    return this;
  }

   /**
   * Get purchases
   * @return purchases
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Purchase> getPurchases() {
    return purchases;
  }


  public void setPurchases(List<Purchase> purchases) {
    this.purchases = purchases;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PropertiesDeltas propertiesDeltas = (PropertiesDeltas) o;
    return Objects.equals(this.sessionTime, propertiesDeltas.sessionTime) &&
        Objects.equals(this.sessionCount, propertiesDeltas.sessionCount) &&
        Objects.equals(this.purchases, propertiesDeltas.purchases);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sessionTime, sessionCount, purchases);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PropertiesDeltas {\n");
    sb.append("    sessionTime: ").append(toIndentedString(sessionTime)).append("\n");
    sb.append("    sessionCount: ").append(toIndentedString(sessionCount)).append("\n");
    sb.append("    purchases: ").append(toIndentedString(purchases)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("session_time");
    openapiFields.add("session_count");
    openapiFields.add("purchases");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PropertiesDeltas.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PropertiesDeltas' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PropertiesDeltas> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PropertiesDeltas.class));

       return (TypeAdapter<T>) new TypeAdapter<PropertiesDeltas>() {
           @Override
           public void write(JsonWriter out, PropertiesDeltas value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PropertiesDeltas read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();

             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PropertiesDeltas given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PropertiesDeltas
  * @throws IOException if the JSON string is invalid with respect to PropertiesDeltas
  */
  public static PropertiesDeltas fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PropertiesDeltas.class);
  }

 /**
  * Convert an instance of PropertiesDeltas to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


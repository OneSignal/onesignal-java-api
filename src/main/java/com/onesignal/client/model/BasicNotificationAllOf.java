/*
 * OneSignal
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: devrel@onesignal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onesignal.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.onesignal.client.model.BasicNotificationAllOfAndroidBackgroundLayout;
import com.onesignal.client.model.Button;
import com.onesignal.client.model.Filter;
import com.onesignal.client.model.StringMap;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.onesignal.client.JSON;

/**
 * BasicNotificationAllOf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-10T01:03:22.700Z[Etc/UTC]")
public class BasicNotificationAllOf {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Integer value;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Gets or Sets aggregation
   */
  @JsonAdapter(AggregationEnum.Adapter.class)
  public enum AggregationEnum {
    SUM("sum"),
    
    COUNT("count");

    private String value;

    AggregationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AggregationEnum fromValue(String value) {
      for (AggregationEnum b : AggregationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AggregationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AggregationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AggregationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AggregationEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_AGGREGATION = "aggregation";
  @SerializedName(SERIALIZED_NAME_AGGREGATION)
  private AggregationEnum aggregation;

  public static final String SERIALIZED_NAME_IS_IOS = "isIos";
  @SerializedName(SERIALIZED_NAME_IS_IOS)
  private Boolean isIos;

  public static final String SERIALIZED_NAME_IS_ANDROID = "isAndroid";
  @SerializedName(SERIALIZED_NAME_IS_ANDROID)
  private Boolean isAndroid;

  public static final String SERIALIZED_NAME_IS_HUAWEI = "isHuawei";
  @SerializedName(SERIALIZED_NAME_IS_HUAWEI)
  private Boolean isHuawei;

  public static final String SERIALIZED_NAME_IS_ANY_WEB = "isAnyWeb";
  @SerializedName(SERIALIZED_NAME_IS_ANY_WEB)
  private Boolean isAnyWeb;

  public static final String SERIALIZED_NAME_IS_CHROME_WEB = "isChromeWeb";
  @SerializedName(SERIALIZED_NAME_IS_CHROME_WEB)
  private Boolean isChromeWeb;

  public static final String SERIALIZED_NAME_IS_FIREFOX = "isFirefox";
  @SerializedName(SERIALIZED_NAME_IS_FIREFOX)
  private Boolean isFirefox;

  public static final String SERIALIZED_NAME_IS_SAFARI = "isSafari";
  @SerializedName(SERIALIZED_NAME_IS_SAFARI)
  private Boolean isSafari;

  public static final String SERIALIZED_NAME_IS_W_P_W_N_S = "isWP_WNS";
  @SerializedName(SERIALIZED_NAME_IS_W_P_W_N_S)
  private Boolean isWPWNS;

  public static final String SERIALIZED_NAME_IS_ADM = "isAdm";
  @SerializedName(SERIALIZED_NAME_IS_ADM)
  private Boolean isAdm;

  public static final String SERIALIZED_NAME_IS_CHROME = "isChrome";
  @SerializedName(SERIALIZED_NAME_IS_CHROME)
  private Boolean isChrome;

  public static final String SERIALIZED_NAME_CHANNEL_FOR_EXTERNAL_USER_IDS = "channel_for_external_user_ids";
  @SerializedName(SERIALIZED_NAME_CHANNEL_FOR_EXTERNAL_USER_IDS)
  private String channelForExternalUserIds;

  public static final String SERIALIZED_NAME_APP_ID = "app_id";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private String appId;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "external_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_CONTENTS = "contents";
  @SerializedName(SERIALIZED_NAME_CONTENTS)
  private StringMap contents;

  public static final String SERIALIZED_NAME_HEADINGS = "headings";
  @SerializedName(SERIALIZED_NAME_HEADINGS)
  private StringMap headings;

  public static final String SERIALIZED_NAME_SUBTITLE = "subtitle";
  @SerializedName(SERIALIZED_NAME_SUBTITLE)
  private StringMap subtitle;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private Object data;

  public static final String SERIALIZED_NAME_HUAWEI_MSG_TYPE = "huawei_msg_type";
  @SerializedName(SERIALIZED_NAME_HUAWEI_MSG_TYPE)
  private String huaweiMsgType;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_WEB_URL = "web_url";
  @SerializedName(SERIALIZED_NAME_WEB_URL)
  private String webUrl;

  public static final String SERIALIZED_NAME_APP_URL = "app_url";
  @SerializedName(SERIALIZED_NAME_APP_URL)
  private String appUrl;

  public static final String SERIALIZED_NAME_IOS_ATTACHMENTS = "ios_attachments";
  @SerializedName(SERIALIZED_NAME_IOS_ATTACHMENTS)
  private Object iosAttachments;

  public static final String SERIALIZED_NAME_TEMPLATE_ID = "template_id";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_ID)
  private String templateId;

  public static final String SERIALIZED_NAME_CONTENT_AVAILABLE = "content_available";
  @SerializedName(SERIALIZED_NAME_CONTENT_AVAILABLE)
  private Boolean contentAvailable;

  public static final String SERIALIZED_NAME_MUTABLE_CONTENT = "mutable_content";
  @SerializedName(SERIALIZED_NAME_MUTABLE_CONTENT)
  private Boolean mutableContent;

  public static final String SERIALIZED_NAME_TARGET_CONTENT_IDENTIFIER = "target_content_identifier";
  @SerializedName(SERIALIZED_NAME_TARGET_CONTENT_IDENTIFIER)
  private String targetContentIdentifier;

  public static final String SERIALIZED_NAME_BIG_PICTURE = "big_picture";
  @SerializedName(SERIALIZED_NAME_BIG_PICTURE)
  private String bigPicture;

  public static final String SERIALIZED_NAME_HUAWEI_BIG_PICTURE = "huawei_big_picture";
  @SerializedName(SERIALIZED_NAME_HUAWEI_BIG_PICTURE)
  private String huaweiBigPicture;

  public static final String SERIALIZED_NAME_ADM_BIG_PICTURE = "adm_big_picture";
  @SerializedName(SERIALIZED_NAME_ADM_BIG_PICTURE)
  private String admBigPicture;

  public static final String SERIALIZED_NAME_CHROME_BIG_PICTURE = "chrome_big_picture";
  @SerializedName(SERIALIZED_NAME_CHROME_BIG_PICTURE)
  private String chromeBigPicture;

  public static final String SERIALIZED_NAME_CHROME_WEB_IMAGE = "chrome_web_image";
  @SerializedName(SERIALIZED_NAME_CHROME_WEB_IMAGE)
  private String chromeWebImage;

  public static final String SERIALIZED_NAME_BUTTONS = "buttons";
  @SerializedName(SERIALIZED_NAME_BUTTONS)
  private List<Button> buttons = null;

  public static final String SERIALIZED_NAME_WEB_BUTTONS = "web_buttons";
  @SerializedName(SERIALIZED_NAME_WEB_BUTTONS)
  private List<Button> webButtons = null;

  public static final String SERIALIZED_NAME_IOS_CATEGORY = "ios_category";
  @SerializedName(SERIALIZED_NAME_IOS_CATEGORY)
  private String iosCategory;

  public static final String SERIALIZED_NAME_ANDROID_CHANNEL_ID = "android_channel_id";
  @SerializedName(SERIALIZED_NAME_ANDROID_CHANNEL_ID)
  private String androidChannelId;

  public static final String SERIALIZED_NAME_HUAWEI_CHANNEL_ID = "huawei_channel_id";
  @SerializedName(SERIALIZED_NAME_HUAWEI_CHANNEL_ID)
  private String huaweiChannelId;

  public static final String SERIALIZED_NAME_EXISTING_ANDROID_CHANNEL_ID = "existing_android_channel_id";
  @SerializedName(SERIALIZED_NAME_EXISTING_ANDROID_CHANNEL_ID)
  private String existingAndroidChannelId;

  public static final String SERIALIZED_NAME_HUAWEI_EXISTING_CHANNEL_ID = "huawei_existing_channel_id";
  @SerializedName(SERIALIZED_NAME_HUAWEI_EXISTING_CHANNEL_ID)
  private String huaweiExistingChannelId;

  public static final String SERIALIZED_NAME_ANDROID_BACKGROUND_LAYOUT = "android_background_layout";
  @SerializedName(SERIALIZED_NAME_ANDROID_BACKGROUND_LAYOUT)
  private BasicNotificationAllOfAndroidBackgroundLayout androidBackgroundLayout;

  public static final String SERIALIZED_NAME_SMALL_ICON = "small_icon";
  @SerializedName(SERIALIZED_NAME_SMALL_ICON)
  private String smallIcon;

  public static final String SERIALIZED_NAME_HUAWEI_SMALL_ICON = "huawei_small_icon";
  @SerializedName(SERIALIZED_NAME_HUAWEI_SMALL_ICON)
  private String huaweiSmallIcon;

  public static final String SERIALIZED_NAME_LARGE_ICON = "large_icon";
  @SerializedName(SERIALIZED_NAME_LARGE_ICON)
  private String largeIcon;

  public static final String SERIALIZED_NAME_HUAWEI_LARGE_ICON = "huawei_large_icon";
  @SerializedName(SERIALIZED_NAME_HUAWEI_LARGE_ICON)
  private String huaweiLargeIcon;

  public static final String SERIALIZED_NAME_ADM_SMALL_ICON = "adm_small_icon";
  @SerializedName(SERIALIZED_NAME_ADM_SMALL_ICON)
  private String admSmallIcon;

  public static final String SERIALIZED_NAME_ADM_LARGE_ICON = "adm_large_icon";
  @SerializedName(SERIALIZED_NAME_ADM_LARGE_ICON)
  private String admLargeIcon;

  public static final String SERIALIZED_NAME_CHROME_WEB_ICON = "chrome_web_icon";
  @SerializedName(SERIALIZED_NAME_CHROME_WEB_ICON)
  private String chromeWebIcon;

  public static final String SERIALIZED_NAME_CHROME_WEB_BADGE = "chrome_web_badge";
  @SerializedName(SERIALIZED_NAME_CHROME_WEB_BADGE)
  private String chromeWebBadge;

  public static final String SERIALIZED_NAME_FIREFOX_ICON = "firefox_icon";
  @SerializedName(SERIALIZED_NAME_FIREFOX_ICON)
  private String firefoxIcon;

  public static final String SERIALIZED_NAME_CHROME_ICON = "chrome_icon";
  @SerializedName(SERIALIZED_NAME_CHROME_ICON)
  private String chromeIcon;

  public static final String SERIALIZED_NAME_IOS_SOUND = "ios_sound";
  @SerializedName(SERIALIZED_NAME_IOS_SOUND)
  private String iosSound;

  public static final String SERIALIZED_NAME_ANDROID_SOUND = "android_sound";
  @SerializedName(SERIALIZED_NAME_ANDROID_SOUND)
  private String androidSound;

  public static final String SERIALIZED_NAME_HUAWEI_SOUND = "huawei_sound";
  @SerializedName(SERIALIZED_NAME_HUAWEI_SOUND)
  private String huaweiSound;

  public static final String SERIALIZED_NAME_ADM_SOUND = "adm_sound";
  @SerializedName(SERIALIZED_NAME_ADM_SOUND)
  private String admSound;

  public static final String SERIALIZED_NAME_WP_WNS_SOUND = "wp_wns_sound";
  @SerializedName(SERIALIZED_NAME_WP_WNS_SOUND)
  private String wpWnsSound;

  public static final String SERIALIZED_NAME_ANDROID_LED_COLOR = "android_led_color";
  @SerializedName(SERIALIZED_NAME_ANDROID_LED_COLOR)
  private String androidLedColor;

  public static final String SERIALIZED_NAME_HUAWEI_LED_COLOR = "huawei_led_color";
  @SerializedName(SERIALIZED_NAME_HUAWEI_LED_COLOR)
  private String huaweiLedColor;

  public static final String SERIALIZED_NAME_ANDROID_ACCENT_COLOR = "android_accent_color";
  @SerializedName(SERIALIZED_NAME_ANDROID_ACCENT_COLOR)
  private String androidAccentColor;

  public static final String SERIALIZED_NAME_HUAWEI_ACCENT_COLOR = "huawei_accent_color";
  @SerializedName(SERIALIZED_NAME_HUAWEI_ACCENT_COLOR)
  private String huaweiAccentColor;

  public static final String SERIALIZED_NAME_ANDROID_VISIBILITY = "android_visibility";
  @SerializedName(SERIALIZED_NAME_ANDROID_VISIBILITY)
  private Integer androidVisibility;

  public static final String SERIALIZED_NAME_HUAWEI_VISIBILITY = "huawei_visibility";
  @SerializedName(SERIALIZED_NAME_HUAWEI_VISIBILITY)
  private Integer huaweiVisibility;

  public static final String SERIALIZED_NAME_IOS_BADGE_TYPE = "ios_badgeType";
  @SerializedName(SERIALIZED_NAME_IOS_BADGE_TYPE)
  private String iosBadgeType;

  public static final String SERIALIZED_NAME_IOS_BADGE_COUNT = "ios_badgeCount";
  @SerializedName(SERIALIZED_NAME_IOS_BADGE_COUNT)
  private Integer iosBadgeCount;

  public static final String SERIALIZED_NAME_COLLAPSE_ID = "collapse_id";
  @SerializedName(SERIALIZED_NAME_COLLAPSE_ID)
  private String collapseId;

  public static final String SERIALIZED_NAME_WEB_PUSH_TOPIC = "web_push_topic";
  @SerializedName(SERIALIZED_NAME_WEB_PUSH_TOPIC)
  private String webPushTopic;

  public static final String SERIALIZED_NAME_APNS_ALERT = "apns_alert";
  @SerializedName(SERIALIZED_NAME_APNS_ALERT)
  private Object apnsAlert;

  public static final String SERIALIZED_NAME_DELAYED_OPTION = "delayed_option";
  @SerializedName(SERIALIZED_NAME_DELAYED_OPTION)
  private String delayedOption;

  public static final String SERIALIZED_NAME_DELIVERY_TIME_OF_DAY = "delivery_time_of_day";
  @SerializedName(SERIALIZED_NAME_DELIVERY_TIME_OF_DAY)
  private String deliveryTimeOfDay;

  public static final String SERIALIZED_NAME_TTL = "ttl";
  @SerializedName(SERIALIZED_NAME_TTL)
  private Integer ttl;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_APNS_PUSH_TYPE_OVERRIDE = "apns_push_type_override";
  @SerializedName(SERIALIZED_NAME_APNS_PUSH_TYPE_OVERRIDE)
  private String apnsPushTypeOverride;

  public static final String SERIALIZED_NAME_THROTTLE_RATE_PER_MINUTE = "throttle_rate_per_minute";
  @SerializedName(SERIALIZED_NAME_THROTTLE_RATE_PER_MINUTE)
  private String throttleRatePerMinute;

  public static final String SERIALIZED_NAME_ANDROID_GROUP = "android_group";
  @SerializedName(SERIALIZED_NAME_ANDROID_GROUP)
  private String androidGroup;

  public static final String SERIALIZED_NAME_ANDROID_GROUP_MESSAGE = "android_group_message";
  @SerializedName(SERIALIZED_NAME_ANDROID_GROUP_MESSAGE)
  private String androidGroupMessage;

  public static final String SERIALIZED_NAME_ADM_GROUP = "adm_group";
  @SerializedName(SERIALIZED_NAME_ADM_GROUP)
  private String admGroup;

  public static final String SERIALIZED_NAME_ADM_GROUP_MESSAGE = "adm_group_message";
  @SerializedName(SERIALIZED_NAME_ADM_GROUP_MESSAGE)
  private Object admGroupMessage;

  public static final String SERIALIZED_NAME_THREAD_ID = "thread_id";
  @SerializedName(SERIALIZED_NAME_THREAD_ID)
  private String threadId;

  public static final String SERIALIZED_NAME_SUMMARY_ARG = "summary_arg";
  @SerializedName(SERIALIZED_NAME_SUMMARY_ARG)
  private String summaryArg;

  public static final String SERIALIZED_NAME_SUMMARY_ARG_COUNT = "summary_arg_count";
  @SerializedName(SERIALIZED_NAME_SUMMARY_ARG_COUNT)
  private Integer summaryArgCount;

  public static final String SERIALIZED_NAME_EMAIL_SUBJECT = "email_subject";
  @SerializedName(SERIALIZED_NAME_EMAIL_SUBJECT)
  private String emailSubject;

  public static final String SERIALIZED_NAME_EMAIL_BODY = "email_body";
  @SerializedName(SERIALIZED_NAME_EMAIL_BODY)
  private String emailBody;

  public static final String SERIALIZED_NAME_EMAIL_FROM_NAME = "email_from_name";
  @SerializedName(SERIALIZED_NAME_EMAIL_FROM_NAME)
  private String emailFromName;

  public static final String SERIALIZED_NAME_EMAIL_FROM_ADDRESS = "email_from_address";
  @SerializedName(SERIALIZED_NAME_EMAIL_FROM_ADDRESS)
  private String emailFromAddress;

  public static final String SERIALIZED_NAME_SMS_FROM = "sms_from";
  @SerializedName(SERIALIZED_NAME_SMS_FROM)
  private String smsFrom;

  public static final String SERIALIZED_NAME_SMS_MEDIA_URLS = "sms_media_urls";
  @SerializedName(SERIALIZED_NAME_SMS_MEDIA_URLS)
  private List<String> smsMediaUrls = null;

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private List<Filter> filters = null;

  public BasicNotificationAllOf() { 
  }

  
  public BasicNotificationAllOf(
     Integer value, 
     AggregationEnum aggregation
  ) {
    this();
    this.value = value;
    this.aggregation = aggregation;
  }

  public BasicNotificationAllOf id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


   /**
   * Get value
   * @return value
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getValue() {
    return value;
  }




  public BasicNotificationAllOf name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Required for SMS Messages. An identifier for tracking message within the OneSignal dashboard or export analytics. Not shown to end user.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Required for SMS Messages. An identifier for tracking message within the OneSignal dashboard or export analytics. Not shown to end user.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


   /**
   * Get aggregation
   * @return aggregation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AggregationEnum getAggregation() {
    return aggregation;
  }




  public BasicNotificationAllOf isIos(Boolean isIos) {
    
    this.isIos = isIos;
    return this;
  }

   /**
   * Indicates whether to send to all devices registered under your app&#39;s Apple iOS platform.
   * @return isIos
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to send to all devices registered under your app's Apple iOS platform.")

  public Boolean getIsIos() {
    return isIos;
  }


  public void setIsIos(Boolean isIos) {
    this.isIos = isIos;
  }


  public BasicNotificationAllOf isAndroid(Boolean isAndroid) {
    
    this.isAndroid = isAndroid;
    return this;
  }

   /**
   * Indicates whether to send to all devices registered under your app&#39;s Google Android platform.
   * @return isAndroid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to send to all devices registered under your app's Google Android platform.")

  public Boolean getIsAndroid() {
    return isAndroid;
  }


  public void setIsAndroid(Boolean isAndroid) {
    this.isAndroid = isAndroid;
  }


  public BasicNotificationAllOf isHuawei(Boolean isHuawei) {
    
    this.isHuawei = isHuawei;
    return this;
  }

   /**
   * Indicates whether to send to all devices registered under your app&#39;s Huawei Android platform.
   * @return isHuawei
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to send to all devices registered under your app's Huawei Android platform.")

  public Boolean getIsHuawei() {
    return isHuawei;
  }


  public void setIsHuawei(Boolean isHuawei) {
    this.isHuawei = isHuawei;
  }


  public BasicNotificationAllOf isAnyWeb(Boolean isAnyWeb) {
    
    this.isAnyWeb = isAnyWeb;
    return this;
  }

   /**
   * Indicates whether to send to all subscribed web browser users, including Chrome, Firefox, and Safari. You may use this instead as a combined flag instead of separately enabling isChromeWeb, isFirefox, and isSafari, though the three options are equivalent to this one. 
   * @return isAnyWeb
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to send to all subscribed web browser users, including Chrome, Firefox, and Safari. You may use this instead as a combined flag instead of separately enabling isChromeWeb, isFirefox, and isSafari, though the three options are equivalent to this one. ")

  public Boolean getIsAnyWeb() {
    return isAnyWeb;
  }


  public void setIsAnyWeb(Boolean isAnyWeb) {
    this.isAnyWeb = isAnyWeb;
  }


  public BasicNotificationAllOf isChromeWeb(Boolean isChromeWeb) {
    
    this.isChromeWeb = isChromeWeb;
    return this;
  }

   /**
   * Indicates whether to send to all Google Chrome, Chrome on Android, and Mozilla Firefox users registered under your Chrome &amp; Firefox web push platform.
   * @return isChromeWeb
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to send to all Google Chrome, Chrome on Android, and Mozilla Firefox users registered under your Chrome & Firefox web push platform.")

  public Boolean getIsChromeWeb() {
    return isChromeWeb;
  }


  public void setIsChromeWeb(Boolean isChromeWeb) {
    this.isChromeWeb = isChromeWeb;
  }


  public BasicNotificationAllOf isFirefox(Boolean isFirefox) {
    
    this.isFirefox = isFirefox;
    return this;
  }

   /**
   * Indicates whether to send to all Mozilla Firefox desktop users registered under your Firefox web push platform.
   * @return isFirefox
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to send to all Mozilla Firefox desktop users registered under your Firefox web push platform.")

  public Boolean getIsFirefox() {
    return isFirefox;
  }


  public void setIsFirefox(Boolean isFirefox) {
    this.isFirefox = isFirefox;
  }


  public BasicNotificationAllOf isSafari(Boolean isSafari) {
    
    this.isSafari = isSafari;
    return this;
  }

   /**
   * Does not support iOS Safari. Indicates whether to send to all Apple&#39;s Safari desktop users registered under your Safari web push platform. Read more iOS Safari
   * @return isSafari
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Does not support iOS Safari. Indicates whether to send to all Apple's Safari desktop users registered under your Safari web push platform. Read more iOS Safari")

  public Boolean getIsSafari() {
    return isSafari;
  }


  public void setIsSafari(Boolean isSafari) {
    this.isSafari = isSafari;
  }


  public BasicNotificationAllOf isWPWNS(Boolean isWPWNS) {
    
    this.isWPWNS = isWPWNS;
    return this;
  }

   /**
   * Indicates whether to send to all devices registered under your app&#39;s Windows platform.
   * @return isWPWNS
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to send to all devices registered under your app's Windows platform.")

  public Boolean getIsWPWNS() {
    return isWPWNS;
  }


  public void setIsWPWNS(Boolean isWPWNS) {
    this.isWPWNS = isWPWNS;
  }


  public BasicNotificationAllOf isAdm(Boolean isAdm) {
    
    this.isAdm = isAdm;
    return this;
  }

   /**
   * Indicates whether to send to all devices registered under your app&#39;s Amazon Fire platform.
   * @return isAdm
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to send to all devices registered under your app's Amazon Fire platform.")

  public Boolean getIsAdm() {
    return isAdm;
  }


  public void setIsAdm(Boolean isAdm) {
    this.isAdm = isAdm;
  }


  public BasicNotificationAllOf isChrome(Boolean isChrome) {
    
    this.isChrome = isChrome;
    return this;
  }

   /**
   * This flag is not used for web push Please see isChromeWeb for sending to web push users. This flag only applies to Google Chrome Apps &amp; Extensions. Indicates whether to send to all devices registered under your app&#39;s Google Chrome Apps &amp; Extension platform. 
   * @return isChrome
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This flag is not used for web push Please see isChromeWeb for sending to web push users. This flag only applies to Google Chrome Apps & Extensions. Indicates whether to send to all devices registered under your app's Google Chrome Apps & Extension platform. ")

  public Boolean getIsChrome() {
    return isChrome;
  }


  public void setIsChrome(Boolean isChrome) {
    this.isChrome = isChrome;
  }


  public BasicNotificationAllOf channelForExternalUserIds(String channelForExternalUserIds) {
    
    this.channelForExternalUserIds = channelForExternalUserIds;
    return this;
  }

   /**
   * Indicates if the message type when targeting with include_external_user_ids for cases where an email, sms, and/or push subscribers have the same external user id. Example: Use the string \&quot;push\&quot; to indicate you are sending a push notification or the string \&quot;email\&quot;for sending emails or \&quot;sms\&quot;for sending SMS. 
   * @return channelForExternalUserIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates if the message type when targeting with include_external_user_ids for cases where an email, sms, and/or push subscribers have the same external user id. Example: Use the string \"push\" to indicate you are sending a push notification or the string \"email\"for sending emails or \"sms\"for sending SMS. ")

  public String getChannelForExternalUserIds() {
    return channelForExternalUserIds;
  }


  public void setChannelForExternalUserIds(String channelForExternalUserIds) {
    this.channelForExternalUserIds = channelForExternalUserIds;
  }


  public BasicNotificationAllOf appId(String appId) {
    
    this.appId = appId;
    return this;
  }

   /**
   * Required: Your OneSignal Application ID, which can be found in Keys &amp; IDs. It is a UUID and looks similar to 8250eaf6-1a58-489e-b136-7c74a864b434. 
   * @return appId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Required: Your OneSignal Application ID, which can be found in Keys & IDs. It is a UUID and looks similar to 8250eaf6-1a58-489e-b136-7c74a864b434. ")

  public String getAppId() {
    return appId;
  }


  public void setAppId(String appId) {
    this.appId = appId;
  }


  public BasicNotificationAllOf externalId(String externalId) {
    
    this.externalId = externalId;
    return this;
  }

   /**
   * Correlation and idempotency key. A request received with this parameter will first look for another notification with the same external_id. If one exists, a notification will not be sent, and result of the previous operation will instead be returned. Therefore, if you plan on using this feature, it&#39;s important to use a good source of randomness to generate the UUID passed here. This key is only idempotent for 30 days. After 30 days, the notification could be removed from our system and a notification with the same external_id will be sent again.   See Idempotent Notification Requests for more details writeOnly: true 
   * @return externalId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Correlation and idempotency key. A request received with this parameter will first look for another notification with the same external_id. If one exists, a notification will not be sent, and result of the previous operation will instead be returned. Therefore, if you plan on using this feature, it's important to use a good source of randomness to generate the UUID passed here. This key is only idempotent for 30 days. After 30 days, the notification could be removed from our system and a notification with the same external_id will be sent again.   See Idempotent Notification Requests for more details writeOnly: true ")

  public String getExternalId() {
    return externalId;
  }


  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  public BasicNotificationAllOf contents(StringMap contents) {
    
    this.contents = contents;
    return this;
  }

   /**
   * Get contents
   * @return contents
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public StringMap getContents() {
    return contents;
  }


  public void setContents(StringMap contents) {
    this.contents = contents;
  }


  public BasicNotificationAllOf headings(StringMap headings) {
    
    this.headings = headings;
    return this;
  }

   /**
   * Get headings
   * @return headings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public StringMap getHeadings() {
    return headings;
  }


  public void setHeadings(StringMap headings) {
    this.headings = headings;
  }


  public BasicNotificationAllOf subtitle(StringMap subtitle) {
    
    this.subtitle = subtitle;
    return this;
  }

   /**
   * Get subtitle
   * @return subtitle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public StringMap getSubtitle() {
    return subtitle;
  }


  public void setSubtitle(StringMap subtitle) {
    this.subtitle = subtitle;
  }


  public BasicNotificationAllOf data(Object data) {
    
    this.data = data;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: Huawei A custom map of data that is passed back to your app. Same as using Additional Data within the dashboard. Can use up to 2048 bytes of data. Example: {\&quot;abc\&quot;: 123, \&quot;foo\&quot;: \&quot;bar\&quot;, \&quot;event_performed\&quot;: true, \&quot;amount\&quot;: 12.1} 
   * @return data
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: Huawei A custom map of data that is passed back to your app. Same as using Additional Data within the dashboard. Can use up to 2048 bytes of data. Example: {\"abc\": 123, \"foo\": \"bar\", \"event_performed\": true, \"amount\": 12.1} ")

  public Object getData() {
    return data;
  }


  public void setData(Object data) {
    this.data = data;
  }


  public BasicNotificationAllOf huaweiMsgType(String huaweiMsgType) {
    
    this.huaweiMsgType = huaweiMsgType;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: Huawei Use \&quot;data\&quot; or \&quot;message\&quot; depending on the type of notification you are sending. More details in Data &amp; Background Notifications. 
   * @return huaweiMsgType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: Huawei Use \"data\" or \"message\" depending on the type of notification you are sending. More details in Data & Background Notifications. ")

  public String getHuaweiMsgType() {
    return huaweiMsgType;
  }


  public void setHuaweiMsgType(String huaweiMsgType) {
    this.huaweiMsgType = huaweiMsgType;
  }


  public BasicNotificationAllOf url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: All The URL to open in the browser when a user clicks on the notification. Note: iOS needs https or updated NSAppTransportSecurity in plist This field supports inline substitutions. Omit if including web_url or app_url Example: https://onesignal.com 
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: All The URL to open in the browser when a user clicks on the notification. Note: iOS needs https or updated NSAppTransportSecurity in plist This field supports inline substitutions. Omit if including web_url or app_url Example: https://onesignal.com ")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


  public BasicNotificationAllOf webUrl(String webUrl) {
    
    this.webUrl = webUrl;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: All Browsers Same as url but only sent to web push platforms. Including Chrome, Firefox, Safari, Opera, etc. Example: https://onesignal.com 
   * @return webUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: All Browsers Same as url but only sent to web push platforms. Including Chrome, Firefox, Safari, Opera, etc. Example: https://onesignal.com ")

  public String getWebUrl() {
    return webUrl;
  }


  public void setWebUrl(String webUrl) {
    this.webUrl = webUrl;
  }


  public BasicNotificationAllOf appUrl(String appUrl) {
    
    this.appUrl = appUrl;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: All Browsers Same as url but only sent to web push platforms. Including iOS, Android, macOS, Windows, ChromeApps, etc. Example: https://onesignal.com 
   * @return appUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: All Browsers Same as url but only sent to web push platforms. Including iOS, Android, macOS, Windows, ChromeApps, etc. Example: https://onesignal.com ")

  public String getAppUrl() {
    return appUrl;
  }


  public void setAppUrl(String appUrl) {
    this.appUrl = appUrl;
  }


  public BasicNotificationAllOf iosAttachments(Object iosAttachments) {
    
    this.iosAttachments = iosAttachments;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: iOS 10+ Adds media attachments to notifications. Set as JSON object, key as a media id of your choice and the value as a valid local filename or URL. User must press and hold on the notification to view. Do not set mutable_content to download attachments. The OneSignal SDK does this automatically Example: {\&quot;id1\&quot;: \&quot;https://domain.com/image.jpg\&quot;} 
   * @return iosAttachments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: iOS 10+ Adds media attachments to notifications. Set as JSON object, key as a media id of your choice and the value as a valid local filename or URL. User must press and hold on the notification to view. Do not set mutable_content to download attachments. The OneSignal SDK does this automatically Example: {\"id1\": \"https://domain.com/image.jpg\"} ")

  public Object getIosAttachments() {
    return iosAttachments;
  }


  public void setIosAttachments(Object iosAttachments) {
    this.iosAttachments = iosAttachments;
  }


  public BasicNotificationAllOf templateId(String templateId) {
    
    this.templateId = templateId;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: All Use a template you setup on our dashboard. The template_id is the UUID found in the URL when viewing a template on our dashboard. Example: be4a8044-bbd6-11e4-a581-000c2940e62c 
   * @return templateId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: All Use a template you setup on our dashboard. The template_id is the UUID found in the URL when viewing a template on our dashboard. Example: be4a8044-bbd6-11e4-a581-000c2940e62c ")

  public String getTemplateId() {
    return templateId;
  }


  public void setTemplateId(String templateId) {
    this.templateId = templateId;
  }


  public BasicNotificationAllOf contentAvailable(Boolean contentAvailable) {
    
    this.contentAvailable = contentAvailable;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: iOS Sending true wakes your app from background to run custom native code (Apple interprets this as content-available&#x3D;1). Note: Not applicable if the app is in the \&quot;force-quit\&quot; state (i.e app was swiped away). Omit the contents field to prevent displaying a visible notification. 
   * @return contentAvailable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: iOS Sending true wakes your app from background to run custom native code (Apple interprets this as content-available=1). Note: Not applicable if the app is in the \"force-quit\" state (i.e app was swiped away). Omit the contents field to prevent displaying a visible notification. ")

  public Boolean getContentAvailable() {
    return contentAvailable;
  }


  public void setContentAvailable(Boolean contentAvailable) {
    this.contentAvailable = contentAvailable;
  }


  public BasicNotificationAllOf mutableContent(Boolean mutableContent) {
    
    this.mutableContent = mutableContent;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: iOS 10+ Always defaults to true and cannot be turned off. Allows tracking of notification receives and changing of the notification content in your app before it is displayed. Triggers didReceive(_:withContentHandler:) on your UNNotificationServiceExtension. 
   * @return mutableContent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: iOS 10+ Always defaults to true and cannot be turned off. Allows tracking of notification receives and changing of the notification content in your app before it is displayed. Triggers didReceive(_:withContentHandler:) on your UNNotificationServiceExtension. ")

  public Boolean getMutableContent() {
    return mutableContent;
  }


  public void setMutableContent(Boolean mutableContent) {
    this.mutableContent = mutableContent;
  }


  public BasicNotificationAllOf targetContentIdentifier(String targetContentIdentifier) {
    
    this.targetContentIdentifier = targetContentIdentifier;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: iOS 13+ Use to target a specific experience in your App Clip, or to target your notification to a specific window in a multi-scene App. 
   * @return targetContentIdentifier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: iOS 13+ Use to target a specific experience in your App Clip, or to target your notification to a specific window in a multi-scene App. ")

  public String getTargetContentIdentifier() {
    return targetContentIdentifier;
  }


  public void setTargetContentIdentifier(String targetContentIdentifier) {
    this.targetContentIdentifier = targetContentIdentifier;
  }


  public BasicNotificationAllOf bigPicture(String bigPicture) {
    
    this.bigPicture = bigPicture;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: Android Picture to display in the expanded view. Can be a drawable resource name or a URL. 
   * @return bigPicture
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: Android Picture to display in the expanded view. Can be a drawable resource name or a URL. ")

  public String getBigPicture() {
    return bigPicture;
  }


  public void setBigPicture(String bigPicture) {
    this.bigPicture = bigPicture;
  }


  public BasicNotificationAllOf huaweiBigPicture(String huaweiBigPicture) {
    
    this.huaweiBigPicture = huaweiBigPicture;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: Huawei Picture to display in the expanded view. Can be a drawable resource name or a URL. 
   * @return huaweiBigPicture
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: Huawei Picture to display in the expanded view. Can be a drawable resource name or a URL. ")

  public String getHuaweiBigPicture() {
    return huaweiBigPicture;
  }


  public void setHuaweiBigPicture(String huaweiBigPicture) {
    this.huaweiBigPicture = huaweiBigPicture;
  }


  public BasicNotificationAllOf admBigPicture(String admBigPicture) {
    
    this.admBigPicture = admBigPicture;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: Amazon Picture to display in the expanded view. Can be a drawable resource name or a URL. 
   * @return admBigPicture
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: Amazon Picture to display in the expanded view. Can be a drawable resource name or a URL. ")

  public String getAdmBigPicture() {
    return admBigPicture;
  }


  public void setAdmBigPicture(String admBigPicture) {
    this.admBigPicture = admBigPicture;
  }


  public BasicNotificationAllOf chromeBigPicture(String chromeBigPicture) {
    
    this.chromeBigPicture = chromeBigPicture;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: ChromeApp Large picture to display below the notification text. Must be a local URL. 
   * @return chromeBigPicture
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: ChromeApp Large picture to display below the notification text. Must be a local URL. ")

  public String getChromeBigPicture() {
    return chromeBigPicture;
  }


  public void setChromeBigPicture(String chromeBigPicture) {
    this.chromeBigPicture = chromeBigPicture;
  }


  public BasicNotificationAllOf chromeWebImage(String chromeWebImage) {
    
    this.chromeWebImage = chromeWebImage;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: Chrome 56+ Sets the web push notification&#39;s large image to be shown below the notification&#39;s title and text. Please see Web Push Notification Icons. 
   * @return chromeWebImage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: Chrome 56+ Sets the web push notification's large image to be shown below the notification's title and text. Please see Web Push Notification Icons. ")

  public String getChromeWebImage() {
    return chromeWebImage;
  }


  public void setChromeWebImage(String chromeWebImage) {
    this.chromeWebImage = chromeWebImage;
  }


  public BasicNotificationAllOf buttons(List<Button> buttons) {
    
    this.buttons = buttons;
    return this;
  }

  public BasicNotificationAllOf addButtonsItem(Button buttonsItem) {
    if (this.buttons == null) {
      this.buttons = new ArrayList<>();
    }
    this.buttons.add(buttonsItem);
    return this;
  }

   /**
   * Channel: Push Notifications Platform: iOS 8.0+, Android 4.1+, and derivatives like Amazon Buttons to add to the notification. Icon only works for Android. Buttons show in reverse order of array position i.e. Last item in array shows as first button on device. Example: [{\&quot;id\&quot;: \&quot;id2\&quot;, \&quot;text\&quot;: \&quot;second button\&quot;, \&quot;icon\&quot;: \&quot;ic_menu_share\&quot;}, {\&quot;id\&quot;: \&quot;id1\&quot;, \&quot;text\&quot;: \&quot;first button\&quot;, \&quot;icon\&quot;: \&quot;ic_menu_send\&quot;}] 
   * @return buttons
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: iOS 8.0+, Android 4.1+, and derivatives like Amazon Buttons to add to the notification. Icon only works for Android. Buttons show in reverse order of array position i.e. Last item in array shows as first button on device. Example: [{\"id\": \"id2\", \"text\": \"second button\", \"icon\": \"ic_menu_share\"}, {\"id\": \"id1\", \"text\": \"first button\", \"icon\": \"ic_menu_send\"}] ")

  public List<Button> getButtons() {
    return buttons;
  }


  public void setButtons(List<Button> buttons) {
    this.buttons = buttons;
  }


  public BasicNotificationAllOf webButtons(List<Button> webButtons) {
    
    this.webButtons = webButtons;
    return this;
  }

  public BasicNotificationAllOf addWebButtonsItem(Button webButtonsItem) {
    if (this.webButtons == null) {
      this.webButtons = new ArrayList<>();
    }
    this.webButtons.add(webButtonsItem);
    return this;
  }

   /**
   * Channel: Push Notifications Platform: Chrome 48+ Add action buttons to the notification. The id field is required. Example: [{\&quot;id\&quot;: \&quot;like-button\&quot;, \&quot;text\&quot;: \&quot;Like\&quot;, \&quot;icon\&quot;: \&quot;http://i.imgur.com/N8SN8ZS.png\&quot;, \&quot;url\&quot;: \&quot;https://yoursite.com\&quot;}, {\&quot;id\&quot;: \&quot;read-more-button\&quot;, \&quot;text\&quot;: \&quot;Read more\&quot;, \&quot;icon\&quot;: \&quot;http://i.imgur.com/MIxJp1L.png\&quot;, \&quot;url\&quot;: \&quot;https://yoursite.com\&quot;}] 
   * @return webButtons
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: Chrome 48+ Add action buttons to the notification. The id field is required. Example: [{\"id\": \"like-button\", \"text\": \"Like\", \"icon\": \"http://i.imgur.com/N8SN8ZS.png\", \"url\": \"https://yoursite.com\"}, {\"id\": \"read-more-button\", \"text\": \"Read more\", \"icon\": \"http://i.imgur.com/MIxJp1L.png\", \"url\": \"https://yoursite.com\"}] ")

  public List<Button> getWebButtons() {
    return webButtons;
  }


  public void setWebButtons(List<Button> webButtons) {
    this.webButtons = webButtons;
  }


  public BasicNotificationAllOf iosCategory(String iosCategory) {
    
    this.iosCategory = iosCategory;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: iOS Category APS payload, use with registerUserNotificationSettings:categories in your Objective-C / Swift code. Example: calendar category which contains actions like accept and decline iOS 10+ This will trigger your UNNotificationContentExtension whose ID matches this category. 
   * @return iosCategory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: iOS Category APS payload, use with registerUserNotificationSettings:categories in your Objective-C / Swift code. Example: calendar category which contains actions like accept and decline iOS 10+ This will trigger your UNNotificationContentExtension whose ID matches this category. ")

  public String getIosCategory() {
    return iosCategory;
  }


  public void setIosCategory(String iosCategory) {
    this.iosCategory = iosCategory;
  }


  public BasicNotificationAllOf androidChannelId(String androidChannelId) {
    
    this.androidChannelId = androidChannelId;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: Android The Android Oreo Notification Category to send the notification under. See the Category documentation on creating one and getting it&#39;s id. 
   * @return androidChannelId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: Android The Android Oreo Notification Category to send the notification under. See the Category documentation on creating one and getting it's id. ")

  public String getAndroidChannelId() {
    return androidChannelId;
  }


  public void setAndroidChannelId(String androidChannelId) {
    this.androidChannelId = androidChannelId;
  }


  public BasicNotificationAllOf huaweiChannelId(String huaweiChannelId) {
    
    this.huaweiChannelId = huaweiChannelId;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: Huawei The Android Oreo Notification Category to send the notification under. See the Category documentation on creating one and getting it&#39;s id. 
   * @return huaweiChannelId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: Huawei The Android Oreo Notification Category to send the notification under. See the Category documentation on creating one and getting it's id. ")

  public String getHuaweiChannelId() {
    return huaweiChannelId;
  }


  public void setHuaweiChannelId(String huaweiChannelId) {
    this.huaweiChannelId = huaweiChannelId;
  }


  public BasicNotificationAllOf existingAndroidChannelId(String existingAndroidChannelId) {
    
    this.existingAndroidChannelId = existingAndroidChannelId;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: Android Use this if you have client side Android Oreo Channels you have already defined in your app with code. 
   * @return existingAndroidChannelId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: Android Use this if you have client side Android Oreo Channels you have already defined in your app with code. ")

  public String getExistingAndroidChannelId() {
    return existingAndroidChannelId;
  }


  public void setExistingAndroidChannelId(String existingAndroidChannelId) {
    this.existingAndroidChannelId = existingAndroidChannelId;
  }


  public BasicNotificationAllOf huaweiExistingChannelId(String huaweiExistingChannelId) {
    
    this.huaweiExistingChannelId = huaweiExistingChannelId;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: Huawei Use this if you have client side Android Oreo Channels you have already defined in your app with code. 
   * @return huaweiExistingChannelId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: Huawei Use this if you have client side Android Oreo Channels you have already defined in your app with code. ")

  public String getHuaweiExistingChannelId() {
    return huaweiExistingChannelId;
  }


  public void setHuaweiExistingChannelId(String huaweiExistingChannelId) {
    this.huaweiExistingChannelId = huaweiExistingChannelId;
  }


  public BasicNotificationAllOf androidBackgroundLayout(BasicNotificationAllOfAndroidBackgroundLayout androidBackgroundLayout) {
    
    this.androidBackgroundLayout = androidBackgroundLayout;
    return this;
  }

   /**
   * Get androidBackgroundLayout
   * @return androidBackgroundLayout
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BasicNotificationAllOfAndroidBackgroundLayout getAndroidBackgroundLayout() {
    return androidBackgroundLayout;
  }


  public void setAndroidBackgroundLayout(BasicNotificationAllOfAndroidBackgroundLayout androidBackgroundLayout) {
    this.androidBackgroundLayout = androidBackgroundLayout;
  }


  public BasicNotificationAllOf smallIcon(String smallIcon) {
    
    this.smallIcon = smallIcon;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: Android Icon shown in the status bar and on the top left of the notification. If not set a bell icon will be used or ic_stat_onesignal_default if you have set this resource name. See: How to create small icons 
   * @return smallIcon
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: Android Icon shown in the status bar and on the top left of the notification. If not set a bell icon will be used or ic_stat_onesignal_default if you have set this resource name. See: How to create small icons ")

  public String getSmallIcon() {
    return smallIcon;
  }


  public void setSmallIcon(String smallIcon) {
    this.smallIcon = smallIcon;
  }


  public BasicNotificationAllOf huaweiSmallIcon(String huaweiSmallIcon) {
    
    this.huaweiSmallIcon = huaweiSmallIcon;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: Huawei Icon shown in the status bar and on the top left of the notification. Use an Android resource path (E.g. /drawable/small_icon). Defaults to your app icon if not set. 
   * @return huaweiSmallIcon
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: Huawei Icon shown in the status bar and on the top left of the notification. Use an Android resource path (E.g. /drawable/small_icon). Defaults to your app icon if not set. ")

  public String getHuaweiSmallIcon() {
    return huaweiSmallIcon;
  }


  public void setHuaweiSmallIcon(String huaweiSmallIcon) {
    this.huaweiSmallIcon = huaweiSmallIcon;
  }


  public BasicNotificationAllOf largeIcon(String largeIcon) {
    
    this.largeIcon = largeIcon;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: Android Can be a drawable resource name or a URL. See: How to create large icons 
   * @return largeIcon
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: Android Can be a drawable resource name or a URL. See: How to create large icons ")

  public String getLargeIcon() {
    return largeIcon;
  }


  public void setLargeIcon(String largeIcon) {
    this.largeIcon = largeIcon;
  }


  public BasicNotificationAllOf huaweiLargeIcon(String huaweiLargeIcon) {
    
    this.huaweiLargeIcon = huaweiLargeIcon;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: Huawei Can be a drawable resource name or a URL. See: How to create large icons 
   * @return huaweiLargeIcon
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: Huawei Can be a drawable resource name or a URL. See: How to create large icons ")

  public String getHuaweiLargeIcon() {
    return huaweiLargeIcon;
  }


  public void setHuaweiLargeIcon(String huaweiLargeIcon) {
    this.huaweiLargeIcon = huaweiLargeIcon;
  }


  public BasicNotificationAllOf admSmallIcon(String admSmallIcon) {
    
    this.admSmallIcon = admSmallIcon;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: Amazon If not set a bell icon will be used or ic_stat_onesignal_default if you have set this resource name. See: How to create small icons 
   * @return admSmallIcon
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: Amazon If not set a bell icon will be used or ic_stat_onesignal_default if you have set this resource name. See: How to create small icons ")

  public String getAdmSmallIcon() {
    return admSmallIcon;
  }


  public void setAdmSmallIcon(String admSmallIcon) {
    this.admSmallIcon = admSmallIcon;
  }


  public BasicNotificationAllOf admLargeIcon(String admLargeIcon) {
    
    this.admLargeIcon = admLargeIcon;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: Amazon If blank the small_icon is used. Can be a drawable resource name or a URL. See: How to create large icons 
   * @return admLargeIcon
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: Amazon If blank the small_icon is used. Can be a drawable resource name or a URL. See: How to create large icons ")

  public String getAdmLargeIcon() {
    return admLargeIcon;
  }


  public void setAdmLargeIcon(String admLargeIcon) {
    this.admLargeIcon = admLargeIcon;
  }


  public BasicNotificationAllOf chromeWebIcon(String chromeWebIcon) {
    
    this.chromeWebIcon = chromeWebIcon;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: Chrome Sets the web push notification&#39;s icon. An image URL linking to a valid image. Common image types are supported; GIF will not animate. We recommend 256x256 (at least 80x80) to display well on high DPI devices. Firefox will also use this icon, unless you specify firefox_icon. 
   * @return chromeWebIcon
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: Chrome Sets the web push notification's icon. An image URL linking to a valid image. Common image types are supported; GIF will not animate. We recommend 256x256 (at least 80x80) to display well on high DPI devices. Firefox will also use this icon, unless you specify firefox_icon. ")

  public String getChromeWebIcon() {
    return chromeWebIcon;
  }


  public void setChromeWebIcon(String chromeWebIcon) {
    this.chromeWebIcon = chromeWebIcon;
  }


  public BasicNotificationAllOf chromeWebBadge(String chromeWebBadge) {
    
    this.chromeWebBadge = chromeWebBadge;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: Chrome Sets the web push notification icon for Android devices in the notification shade. Please see Web Push Notification Badge. 
   * @return chromeWebBadge
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: Chrome Sets the web push notification icon for Android devices in the notification shade. Please see Web Push Notification Badge. ")

  public String getChromeWebBadge() {
    return chromeWebBadge;
  }


  public void setChromeWebBadge(String chromeWebBadge) {
    this.chromeWebBadge = chromeWebBadge;
  }


  public BasicNotificationAllOf firefoxIcon(String firefoxIcon) {
    
    this.firefoxIcon = firefoxIcon;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: Firefox Not recommended Few people need to set Firefox-specific icons. We recommend setting chrome_web_icon instead, which Firefox will also use. Sets the web push notification&#39;s icon for Firefox. An image URL linking to a valid image. Common image types are supported; GIF will not animate. We recommend 256x256 (at least 80x80) to display well on high DPI devices. 
   * @return firefoxIcon
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: Firefox Not recommended Few people need to set Firefox-specific icons. We recommend setting chrome_web_icon instead, which Firefox will also use. Sets the web push notification's icon for Firefox. An image URL linking to a valid image. Common image types are supported; GIF will not animate. We recommend 256x256 (at least 80x80) to display well on high DPI devices. ")

  public String getFirefoxIcon() {
    return firefoxIcon;
  }


  public void setFirefoxIcon(String firefoxIcon) {
    this.firefoxIcon = firefoxIcon;
  }


  public BasicNotificationAllOf chromeIcon(String chromeIcon) {
    
    this.chromeIcon = chromeIcon;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: ChromeApp This flag is not used for web push For web push, please see chrome_web_icon instead. The local URL to an icon to use. If blank, the app icon will be used. 
   * @return chromeIcon
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: ChromeApp This flag is not used for web push For web push, please see chrome_web_icon instead. The local URL to an icon to use. If blank, the app icon will be used. ")

  public String getChromeIcon() {
    return chromeIcon;
  }


  public void setChromeIcon(String chromeIcon) {
    this.chromeIcon = chromeIcon;
  }


  public BasicNotificationAllOf iosSound(String iosSound) {
    
    this.iosSound = iosSound;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: iOS Sound file that is included in your app to play instead of the default device notification sound. Pass nil to disable vibration and sound for the notification. Example: \&quot;notification.wav\&quot; 
   * @return iosSound
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: iOS Sound file that is included in your app to play instead of the default device notification sound. Pass nil to disable vibration and sound for the notification. Example: \"notification.wav\" ")

  public String getIosSound() {
    return iosSound;
  }


  public void setIosSound(String iosSound) {
    this.iosSound = iosSound;
  }


  public BasicNotificationAllOf androidSound(String androidSound) {
    
    this.androidSound = androidSound;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: Android &amp;#9888;&amp;#65039;Deprecated, this field doesn&#39;t work on Android 8 (Oreo) and newer devices! Please use Notification Categories / Channels noted above instead to support ALL versions of Android. Sound file that is included in your app to play instead of the default device notification sound. Pass nil to disable sound for the notification. NOTE: Leave off file extension for Android. Example: \&quot;notification\&quot; 
   * @return androidSound
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: Android &#9888;&#65039;Deprecated, this field doesn't work on Android 8 (Oreo) and newer devices! Please use Notification Categories / Channels noted above instead to support ALL versions of Android. Sound file that is included in your app to play instead of the default device notification sound. Pass nil to disable sound for the notification. NOTE: Leave off file extension for Android. Example: \"notification\" ")

  public String getAndroidSound() {
    return androidSound;
  }


  public void setAndroidSound(String androidSound) {
    this.androidSound = androidSound;
  }


  public BasicNotificationAllOf huaweiSound(String huaweiSound) {
    
    this.huaweiSound = huaweiSound;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: Huawei &amp;#9888;&amp;#65039;Deprecated, this field ONLY works on EMUI 5 (Android 7 based) and older devices. Please also set Notification Categories / Channels noted above to support EMUI 8 (Android 8 based) devices. Sound file that is included in your app to play instead of the default device notification sound. NOTE: Leave off file extension for and include the full path.  Example: \&quot;/res/raw/notification\&quot; 
   * @return huaweiSound
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: Huawei &#9888;&#65039;Deprecated, this field ONLY works on EMUI 5 (Android 7 based) and older devices. Please also set Notification Categories / Channels noted above to support EMUI 8 (Android 8 based) devices. Sound file that is included in your app to play instead of the default device notification sound. NOTE: Leave off file extension for and include the full path.  Example: \"/res/raw/notification\" ")

  public String getHuaweiSound() {
    return huaweiSound;
  }


  public void setHuaweiSound(String huaweiSound) {
    this.huaweiSound = huaweiSound;
  }


  public BasicNotificationAllOf admSound(String admSound) {
    
    this.admSound = admSound;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: Amazon &amp;#9888;&amp;#65039;Deprecated, this field doesn&#39;t work on Android 8 (Oreo) and newer devices! Please use Notification Categories / Channels noted above instead to support ALL versions of Android. Sound file that is included in your app to play instead of the default device notification sound. Pass nil to disable sound for the notification. NOTE: Leave off file extension for Android. Example: \&quot;notification\&quot; 
   * @return admSound
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: Amazon &#9888;&#65039;Deprecated, this field doesn't work on Android 8 (Oreo) and newer devices! Please use Notification Categories / Channels noted above instead to support ALL versions of Android. Sound file that is included in your app to play instead of the default device notification sound. Pass nil to disable sound for the notification. NOTE: Leave off file extension for Android. Example: \"notification\" ")

  public String getAdmSound() {
    return admSound;
  }


  public void setAdmSound(String admSound) {
    this.admSound = admSound;
  }


  public BasicNotificationAllOf wpWnsSound(String wpWnsSound) {
    
    this.wpWnsSound = wpWnsSound;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: Windows Sound file that is included in your app to play instead of the default device notification sound. Example: \&quot;notification.wav\&quot; 
   * @return wpWnsSound
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: Windows Sound file that is included in your app to play instead of the default device notification sound. Example: \"notification.wav\" ")

  public String getWpWnsSound() {
    return wpWnsSound;
  }


  public void setWpWnsSound(String wpWnsSound) {
    this.wpWnsSound = wpWnsSound;
  }


  public BasicNotificationAllOf androidLedColor(String androidLedColor) {
    
    this.androidLedColor = androidLedColor;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: Android &amp;#9888;&amp;#65039;Deprecated, this field doesn&#39;t work on Android 8 (Oreo) and newer devices! Please use Notification Categories / Channels noted above instead to support ALL versions of Android. Sets the devices LED notification light if the device has one. ARGB Hex format. Example(Blue): \&quot;FF0000FF\&quot; 
   * @return androidLedColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: Android &#9888;&#65039;Deprecated, this field doesn't work on Android 8 (Oreo) and newer devices! Please use Notification Categories / Channels noted above instead to support ALL versions of Android. Sets the devices LED notification light if the device has one. ARGB Hex format. Example(Blue): \"FF0000FF\" ")

  public String getAndroidLedColor() {
    return androidLedColor;
  }


  public void setAndroidLedColor(String androidLedColor) {
    this.androidLedColor = androidLedColor;
  }


  public BasicNotificationAllOf huaweiLedColor(String huaweiLedColor) {
    
    this.huaweiLedColor = huaweiLedColor;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: Huawei &amp;#9888;&amp;#65039;Deprecated, this field ONLY works on EMUI 5 (Android 7 based) and older devices. Please also set Notification Categories / Channels noted above to support EMUI 8 (Android 8 based) devices. Sets the devices LED notification light if the device has one. RGB Hex format. Example(Blue): \&quot;0000FF\&quot; 
   * @return huaweiLedColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: Huawei &#9888;&#65039;Deprecated, this field ONLY works on EMUI 5 (Android 7 based) and older devices. Please also set Notification Categories / Channels noted above to support EMUI 8 (Android 8 based) devices. Sets the devices LED notification light if the device has one. RGB Hex format. Example(Blue): \"0000FF\" ")

  public String getHuaweiLedColor() {
    return huaweiLedColor;
  }


  public void setHuaweiLedColor(String huaweiLedColor) {
    this.huaweiLedColor = huaweiLedColor;
  }


  public BasicNotificationAllOf androidAccentColor(String androidAccentColor) {
    
    this.androidAccentColor = androidAccentColor;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: Android Sets the background color of the notification circle to the left of the notification text. Only applies to apps targeting Android API level 21+ on Android 5.0+ devices. Example(Red): \&quot;FFFF0000\&quot; 
   * @return androidAccentColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: Android Sets the background color of the notification circle to the left of the notification text. Only applies to apps targeting Android API level 21+ on Android 5.0+ devices. Example(Red): \"FFFF0000\" ")

  public String getAndroidAccentColor() {
    return androidAccentColor;
  }


  public void setAndroidAccentColor(String androidAccentColor) {
    this.androidAccentColor = androidAccentColor;
  }


  public BasicNotificationAllOf huaweiAccentColor(String huaweiAccentColor) {
    
    this.huaweiAccentColor = huaweiAccentColor;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: Huawei Accent Color used on Action Buttons and Group overflow count. Uses RGB Hex value (E.g. #9900FF). Defaults to device&#39;s theme color if not set. 
   * @return huaweiAccentColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: Huawei Accent Color used on Action Buttons and Group overflow count. Uses RGB Hex value (E.g. #9900FF). Defaults to device's theme color if not set. ")

  public String getHuaweiAccentColor() {
    return huaweiAccentColor;
  }


  public void setHuaweiAccentColor(String huaweiAccentColor) {
    this.huaweiAccentColor = huaweiAccentColor;
  }


  public BasicNotificationAllOf androidVisibility(Integer androidVisibility) {
    
    this.androidVisibility = androidVisibility;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: Android 5.0_ &amp;#9888;&amp;#65039;Deprecated, this field doesn&#39;t work on Android 8 (Oreo) and newer devices! Please use Notification Categories / Channels noted above instead to support ALL versions of Android. 1 &#x3D; Public (default) (Shows the full message on the lock screen unless the user has disabled all notifications from showing on the lock screen. Please consider the user and mark private if the contents are.) 0 &#x3D; Private (Hides message contents on lock screen if the user set \&quot;Hide sensitive notification content\&quot; in the system settings) -1 &#x3D; Secret (Notification does not show on the lock screen at all) 
   * @return androidVisibility
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: Android 5.0_ &#9888;&#65039;Deprecated, this field doesn't work on Android 8 (Oreo) and newer devices! Please use Notification Categories / Channels noted above instead to support ALL versions of Android. 1 = Public (default) (Shows the full message on the lock screen unless the user has disabled all notifications from showing on the lock screen. Please consider the user and mark private if the contents are.) 0 = Private (Hides message contents on lock screen if the user set \"Hide sensitive notification content\" in the system settings) -1 = Secret (Notification does not show on the lock screen at all) ")

  public Integer getAndroidVisibility() {
    return androidVisibility;
  }


  public void setAndroidVisibility(Integer androidVisibility) {
    this.androidVisibility = androidVisibility;
  }


  public BasicNotificationAllOf huaweiVisibility(Integer huaweiVisibility) {
    
    this.huaweiVisibility = huaweiVisibility;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: Huawei &amp;#9888;&amp;#65039;Deprecated, this field ONLY works on EMUI 5 (Android 7 based) and older devices. Please also set Notification Categories / Channels noted above to support EMUI 8 (Android 8 based) devices. 1 &#x3D; Public (default) (Shows the full message on the lock screen unless the user has disabled all notifications from showing on the lock screen. Please consider the user and mark private if the contents are.) 0 &#x3D; Private (Hides message contents on lock screen if the user set \&quot;Hide sensitive notification content\&quot; in the system settings) -1 &#x3D; Secret (Notification does not show on the lock screen at all) 
   * @return huaweiVisibility
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: Huawei &#9888;&#65039;Deprecated, this field ONLY works on EMUI 5 (Android 7 based) and older devices. Please also set Notification Categories / Channels noted above to support EMUI 8 (Android 8 based) devices. 1 = Public (default) (Shows the full message on the lock screen unless the user has disabled all notifications from showing on the lock screen. Please consider the user and mark private if the contents are.) 0 = Private (Hides message contents on lock screen if the user set \"Hide sensitive notification content\" in the system settings) -1 = Secret (Notification does not show on the lock screen at all) ")

  public Integer getHuaweiVisibility() {
    return huaweiVisibility;
  }


  public void setHuaweiVisibility(Integer huaweiVisibility) {
    this.huaweiVisibility = huaweiVisibility;
  }


  public BasicNotificationAllOf iosBadgeType(String iosBadgeType) {
    
    this.iosBadgeType = iosBadgeType;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: iOS Describes whether to set or increase/decrease your app&#39;s iOS badge count by the ios_badgeCount specified count. Can specify None, SetTo, or Increase. &#x60;None&#x60; leaves the count unaffected. &#x60;SetTo&#x60; directly sets the badge count to the number specified in ios_badgeCount. &#x60;Increase&#x60; adds the number specified in ios_badgeCount to the total. Use a negative number to decrease the badge count. 
   * @return iosBadgeType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: iOS Describes whether to set or increase/decrease your app's iOS badge count by the ios_badgeCount specified count. Can specify None, SetTo, or Increase. `None` leaves the count unaffected. `SetTo` directly sets the badge count to the number specified in ios_badgeCount. `Increase` adds the number specified in ios_badgeCount to the total. Use a negative number to decrease the badge count. ")

  public String getIosBadgeType() {
    return iosBadgeType;
  }


  public void setIosBadgeType(String iosBadgeType) {
    this.iosBadgeType = iosBadgeType;
  }


  public BasicNotificationAllOf iosBadgeCount(Integer iosBadgeCount) {
    
    this.iosBadgeCount = iosBadgeCount;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: iOS Used with ios_badgeType, describes the value to set or amount to increase/decrease your app&#39;s iOS badge count by. You can use a negative number to decrease the badge count when used with an ios_badgeType of Increase. 
   * @return iosBadgeCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: iOS Used with ios_badgeType, describes the value to set or amount to increase/decrease your app's iOS badge count by. You can use a negative number to decrease the badge count when used with an ios_badgeType of Increase. ")

  public Integer getIosBadgeCount() {
    return iosBadgeCount;
  }


  public void setIosBadgeCount(Integer iosBadgeCount) {
    this.iosBadgeCount = iosBadgeCount;
  }


  public BasicNotificationAllOf collapseId(String collapseId) {
    
    this.collapseId = collapseId;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: iOS 10+, Android Only one notification with the same id will be shown on the device. Use the same id to update an existing notification instead of showing a new one. Limit of 64 characters. 
   * @return collapseId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: iOS 10+, Android Only one notification with the same id will be shown on the device. Use the same id to update an existing notification instead of showing a new one. Limit of 64 characters. ")

  public String getCollapseId() {
    return collapseId;
  }


  public void setCollapseId(String collapseId) {
    this.collapseId = collapseId;
  }


  public BasicNotificationAllOf webPushTopic(String webPushTopic) {
    
    this.webPushTopic = webPushTopic;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: All Browsers Display multiple notifications at once with different topics. 
   * @return webPushTopic
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: All Browsers Display multiple notifications at once with different topics. ")

  public String getWebPushTopic() {
    return webPushTopic;
  }


  public void setWebPushTopic(String webPushTopic) {
    this.webPushTopic = webPushTopic;
  }


  public BasicNotificationAllOf apnsAlert(Object apnsAlert) {
    
    this.apnsAlert = apnsAlert;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: iOS 10+ iOS can localize push notification messages on the client using special parameters such as loc-key. When using the Create Notification endpoint, you must include these parameters inside of a field called apns_alert. Please see Apple&#39;s guide on localizing push notifications to learn more. 
   * @return apnsAlert
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: iOS 10+ iOS can localize push notification messages on the client using special parameters such as loc-key. When using the Create Notification endpoint, you must include these parameters inside of a field called apns_alert. Please see Apple's guide on localizing push notifications to learn more. ")

  public Object getApnsAlert() {
    return apnsAlert;
  }


  public void setApnsAlert(Object apnsAlert) {
    this.apnsAlert = apnsAlert;
  }


  public BasicNotificationAllOf delayedOption(String delayedOption) {
    
    this.delayedOption = delayedOption;
    return this;
  }

   /**
   * Channel: All Possible values are: timezone (Deliver at a specific time-of-day in each users own timezone) last-active Same as Intelligent Delivery . (Deliver at the same time of day as each user last used your app). If send_after is used, this takes effect after the send_after time has elapsed. 
   * @return delayedOption
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: All Possible values are: timezone (Deliver at a specific time-of-day in each users own timezone) last-active Same as Intelligent Delivery . (Deliver at the same time of day as each user last used your app). If send_after is used, this takes effect after the send_after time has elapsed. ")

  public String getDelayedOption() {
    return delayedOption;
  }


  public void setDelayedOption(String delayedOption) {
    this.delayedOption = delayedOption;
  }


  public BasicNotificationAllOf deliveryTimeOfDay(String deliveryTimeOfDay) {
    
    this.deliveryTimeOfDay = deliveryTimeOfDay;
    return this;
  }

   /**
   * Channel: All Use with delayed_option&#x3D;timezone. Examples: \&quot;9:00AM\&quot; \&quot;21:45\&quot; \&quot;9:45:30\&quot; 
   * @return deliveryTimeOfDay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: All Use with delayed_option=timezone. Examples: \"9:00AM\" \"21:45\" \"9:45:30\" ")

  public String getDeliveryTimeOfDay() {
    return deliveryTimeOfDay;
  }


  public void setDeliveryTimeOfDay(String deliveryTimeOfDay) {
    this.deliveryTimeOfDay = deliveryTimeOfDay;
  }


  public BasicNotificationAllOf ttl(Integer ttl) {
    
    this.ttl = ttl;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: iOS, Android, Chrome, Firefox, Safari, ChromeWeb Time To Live - In seconds. The notification will be expired if the device does not come back online within this time. The default is 259,200 seconds (3 days). Max value to set is 2419200 seconds (28 days). 
   * @return ttl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: iOS, Android, Chrome, Firefox, Safari, ChromeWeb Time To Live - In seconds. The notification will be expired if the device does not come back online within this time. The default is 259,200 seconds (3 days). Max value to set is 2419200 seconds (28 days). ")

  public Integer getTtl() {
    return ttl;
  }


  public void setTtl(Integer ttl) {
    this.ttl = ttl;
  }


  public BasicNotificationAllOf priority(Integer priority) {
    
    this.priority = priority;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: Android, Chrome, ChromeWeb Delivery priority through the push server (example GCM/FCM). Pass 10 for high priority or any other integer for normal priority. Defaults to normal priority for Android and high for iOS. For Android 6.0+ devices setting priority to high will wake the device out of doze mode. 
   * @return priority
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: Android, Chrome, ChromeWeb Delivery priority through the push server (example GCM/FCM). Pass 10 for high priority or any other integer for normal priority. Defaults to normal priority for Android and high for iOS. For Android 6.0+ devices setting priority to high will wake the device out of doze mode. ")

  public Integer getPriority() {
    return priority;
  }


  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  public BasicNotificationAllOf apnsPushTypeOverride(String apnsPushTypeOverride) {
    
    this.apnsPushTypeOverride = apnsPushTypeOverride;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: iOS valid values: voip Set the value to voip for sending VoIP Notifications This field maps to the APNS header apns-push-type. Note: alert and background are automatically set by OneSignal 
   * @return apnsPushTypeOverride
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: iOS valid values: voip Set the value to voip for sending VoIP Notifications This field maps to the APNS header apns-push-type. Note: alert and background are automatically set by OneSignal ")

  public String getApnsPushTypeOverride() {
    return apnsPushTypeOverride;
  }


  public void setApnsPushTypeOverride(String apnsPushTypeOverride) {
    this.apnsPushTypeOverride = apnsPushTypeOverride;
  }


  public BasicNotificationAllOf throttleRatePerMinute(String throttleRatePerMinute) {
    
    this.throttleRatePerMinute = throttleRatePerMinute;
    return this;
  }

   /**
   * Channel: All Apps with throttling enabled:   - the parameter value will be used to override the default application throttling value set from the dashboard settings.   - parameter value 0 indicates not to apply throttling to the notification.   - if the parameter is not passed then the default app throttling value will be applied to the notification. Apps with throttling disabled:   - this parameter can be used to throttle delivery for the notification even though throttling is not enabled at the application level. Refer to throttling for more details. 
   * @return throttleRatePerMinute
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: All Apps with throttling enabled:   - the parameter value will be used to override the default application throttling value set from the dashboard settings.   - parameter value 0 indicates not to apply throttling to the notification.   - if the parameter is not passed then the default app throttling value will be applied to the notification. Apps with throttling disabled:   - this parameter can be used to throttle delivery for the notification even though throttling is not enabled at the application level. Refer to throttling for more details. ")

  public String getThrottleRatePerMinute() {
    return throttleRatePerMinute;
  }


  public void setThrottleRatePerMinute(String throttleRatePerMinute) {
    this.throttleRatePerMinute = throttleRatePerMinute;
  }


  public BasicNotificationAllOf androidGroup(String androidGroup) {
    
    this.androidGroup = androidGroup;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: Android Notifications with the same group will be stacked together using Android&#39;s Notification Grouping feature. 
   * @return androidGroup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: Android Notifications with the same group will be stacked together using Android's Notification Grouping feature. ")

  public String getAndroidGroup() {
    return androidGroup;
  }


  public void setAndroidGroup(String androidGroup) {
    this.androidGroup = androidGroup;
  }


  public BasicNotificationAllOf androidGroupMessage(String androidGroupMessage) {
    
    this.androidGroupMessage = androidGroupMessage;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: Android Note: This only works for Android 6 and older. Android 7+ allows full expansion of all message. Summary message to display when 2+ notifications are stacked together. Default is \&quot;# new messages\&quot;. Include $[notif_count] in your message and it will be replaced with the current number. Languages - The value of each key is the message that will be sent to users for that language. \&quot;en\&quot; (English) is required. The key of each hash is either a a 2 character language code or one of zh-Hans/zh-Hant for Simplified or Traditional Chinese. Read more: supported languages. Example: {\&quot;en\&quot;: \&quot;You have $[notif_count] new messages\&quot;} 
   * @return androidGroupMessage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: Android Note: This only works for Android 6 and older. Android 7+ allows full expansion of all message. Summary message to display when 2+ notifications are stacked together. Default is \"# new messages\". Include $[notif_count] in your message and it will be replaced with the current number. Languages - The value of each key is the message that will be sent to users for that language. \"en\" (English) is required. The key of each hash is either a a 2 character language code or one of zh-Hans/zh-Hant for Simplified or Traditional Chinese. Read more: supported languages. Example: {\"en\": \"You have $[notif_count] new messages\"} ")

  public String getAndroidGroupMessage() {
    return androidGroupMessage;
  }


  public void setAndroidGroupMessage(String androidGroupMessage) {
    this.androidGroupMessage = androidGroupMessage;
  }


  public BasicNotificationAllOf admGroup(String admGroup) {
    
    this.admGroup = admGroup;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: Amazon Notifications with the same group will be stacked together using Android&#39;s Notification Grouping feature. 
   * @return admGroup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: Amazon Notifications with the same group will be stacked together using Android's Notification Grouping feature. ")

  public String getAdmGroup() {
    return admGroup;
  }


  public void setAdmGroup(String admGroup) {
    this.admGroup = admGroup;
  }


  public BasicNotificationAllOf admGroupMessage(Object admGroupMessage) {
    
    this.admGroupMessage = admGroupMessage;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: Amazon Summary message to display when 2+ notifications are stacked together. Default is \&quot;# new messages\&quot;. Include $[notif_count] in your message and it will be replaced with the current number. \&quot;en\&quot; (English) is required. The key of each hash is either a a 2 character language code or one of zh-Hans/zh-Hant for Simplified or Traditional Chinese. The value of each key is the message that will be sent to users for that language. Example: {\&quot;en\&quot;: \&quot;You have $[notif_count] new messages\&quot;} 
   * @return admGroupMessage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: Amazon Summary message to display when 2+ notifications are stacked together. Default is \"# new messages\". Include $[notif_count] in your message and it will be replaced with the current number. \"en\" (English) is required. The key of each hash is either a a 2 character language code or one of zh-Hans/zh-Hant for Simplified or Traditional Chinese. The value of each key is the message that will be sent to users for that language. Example: {\"en\": \"You have $[notif_count] new messages\"} ")

  public Object getAdmGroupMessage() {
    return admGroupMessage;
  }


  public void setAdmGroupMessage(Object admGroupMessage) {
    this.admGroupMessage = admGroupMessage;
  }


  public BasicNotificationAllOf threadId(String threadId) {
    
    this.threadId = threadId;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: iOS 12+ This parameter is supported in iOS 12 and above. It allows you to group related notifications together. If two notifications have the same thread-id, they will both be added to the same group. 
   * @return threadId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: iOS 12+ This parameter is supported in iOS 12 and above. It allows you to group related notifications together. If two notifications have the same thread-id, they will both be added to the same group. ")

  public String getThreadId() {
    return threadId;
  }


  public void setThreadId(String threadId) {
    this.threadId = threadId;
  }


  public BasicNotificationAllOf summaryArg(String summaryArg) {
    
    this.summaryArg = summaryArg;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: iOS 12+ When using thread_id to create grouped notifications in iOS 12+, you can also control the summary. For example, a grouped notification can say \&quot;12 more notifications from John Doe\&quot;. The summary_arg lets you set the name of the person/thing the notifications are coming from, and will show up as \&quot;X more notifications from summary_arg\&quot; 
   * @return summaryArg
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: iOS 12+ When using thread_id to create grouped notifications in iOS 12+, you can also control the summary. For example, a grouped notification can say \"12 more notifications from John Doe\". The summary_arg lets you set the name of the person/thing the notifications are coming from, and will show up as \"X more notifications from summary_arg\" ")

  public String getSummaryArg() {
    return summaryArg;
  }


  public void setSummaryArg(String summaryArg) {
    this.summaryArg = summaryArg;
  }


  public BasicNotificationAllOf summaryArgCount(Integer summaryArgCount) {
    
    this.summaryArgCount = summaryArgCount;
    return this;
  }

   /**
   * Channel: Push Notifications Platform: iOS 12+ When using thread_id, you can also control the count of the number of notifications in the group. For example, if the group already has 12 notifications, and you send a new notification with summary_arg_count &#x3D; 2, the new total will be 14 and the summary will be \&quot;14 more notifications from summary_arg\&quot; 
   * @return summaryArgCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Push Notifications Platform: iOS 12+ When using thread_id, you can also control the count of the number of notifications in the group. For example, if the group already has 12 notifications, and you send a new notification with summary_arg_count = 2, the new total will be 14 and the summary will be \"14 more notifications from summary_arg\" ")

  public Integer getSummaryArgCount() {
    return summaryArgCount;
  }


  public void setSummaryArgCount(Integer summaryArgCount) {
    this.summaryArgCount = summaryArgCount;
  }


  public BasicNotificationAllOf emailSubject(String emailSubject) {
    
    this.emailSubject = emailSubject;
    return this;
  }

   /**
   * Channel: Email Required.  The subject of the email. 
   * @return emailSubject
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Email Required.  The subject of the email. ")

  public String getEmailSubject() {
    return emailSubject;
  }


  public void setEmailSubject(String emailSubject) {
    this.emailSubject = emailSubject;
  }


  public BasicNotificationAllOf emailBody(String emailBody) {
    
    this.emailBody = emailBody;
    return this;
  }

   /**
   * Channel: Email Required unless template_id is set. HTML suported The body of the email you wish to send. Typically, customers include their own HTML templates here. Must include [unsubscribe_url] in an &lt;a&gt; tag somewhere in the email. Note: any malformed HTML content will be sent to users. Please double-check your HTML is valid. 
   * @return emailBody
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Email Required unless template_id is set. HTML suported The body of the email you wish to send. Typically, customers include their own HTML templates here. Must include [unsubscribe_url] in an <a> tag somewhere in the email. Note: any malformed HTML content will be sent to users. Please double-check your HTML is valid. ")

  public String getEmailBody() {
    return emailBody;
  }


  public void setEmailBody(String emailBody) {
    this.emailBody = emailBody;
  }


  public BasicNotificationAllOf emailFromName(String emailFromName) {
    
    this.emailFromName = emailFromName;
    return this;
  }

   /**
   * Channel: Email The name the email is from. If not specified, will default to \&quot;from name\&quot; set in the OneSignal Dashboard Email Settings. 
   * @return emailFromName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Email The name the email is from. If not specified, will default to \"from name\" set in the OneSignal Dashboard Email Settings. ")

  public String getEmailFromName() {
    return emailFromName;
  }


  public void setEmailFromName(String emailFromName) {
    this.emailFromName = emailFromName;
  }


  public BasicNotificationAllOf emailFromAddress(String emailFromAddress) {
    
    this.emailFromAddress = emailFromAddress;
    return this;
  }

   /**
   * Channel: Email The email address the email is from. If not specified, will default to \&quot;from email\&quot; set in the OneSignal Dashboard Email Settings. 
   * @return emailFromAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: Email The email address the email is from. If not specified, will default to \"from email\" set in the OneSignal Dashboard Email Settings. ")

  public String getEmailFromAddress() {
    return emailFromAddress;
  }


  public void setEmailFromAddress(String emailFromAddress) {
    this.emailFromAddress = emailFromAddress;
  }


  public BasicNotificationAllOf smsFrom(String smsFrom) {
    
    this.smsFrom = smsFrom;
    return this;
  }

   /**
   * Channel: SMS Phone Number used to send SMS. Should be a registered Twilio phone number in E.164 format. 
   * @return smsFrom
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: SMS Phone Number used to send SMS. Should be a registered Twilio phone number in E.164 format. ")

  public String getSmsFrom() {
    return smsFrom;
  }


  public void setSmsFrom(String smsFrom) {
    this.smsFrom = smsFrom;
  }


  public BasicNotificationAllOf smsMediaUrls(List<String> smsMediaUrls) {
    
    this.smsMediaUrls = smsMediaUrls;
    return this;
  }

  public BasicNotificationAllOf addSmsMediaUrlsItem(String smsMediaUrlsItem) {
    if (this.smsMediaUrls == null) {
      this.smsMediaUrls = new ArrayList<>();
    }
    this.smsMediaUrls.add(smsMediaUrlsItem);
    return this;
  }

   /**
   * Channel: SMS URLs for the media files to be attached to the SMS content. Limit: 10 media urls with a total max. size of 5MBs. 
   * @return smsMediaUrls
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel: SMS URLs for the media files to be attached to the SMS content. Limit: 10 media urls with a total max. size of 5MBs. ")

  public List<String> getSmsMediaUrls() {
    return smsMediaUrls;
  }


  public void setSmsMediaUrls(List<String> smsMediaUrls) {
    this.smsMediaUrls = smsMediaUrls;
  }


  public BasicNotificationAllOf filters(List<Filter> filters) {
    
    this.filters = filters;
    return this;
  }

  public BasicNotificationAllOf addFiltersItem(Filter filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<>();
    }
    this.filters.add(filtersItem);
    return this;
  }

   /**
   * Get filters
   * @return filters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Filter> getFilters() {
    return filters;
  }


  public void setFilters(List<Filter> filters) {
    this.filters = filters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BasicNotificationAllOf basicNotificationAllOf = (BasicNotificationAllOf) o;
    return Objects.equals(this.id, basicNotificationAllOf.id) &&
        Objects.equals(this.value, basicNotificationAllOf.value) &&
        Objects.equals(this.name, basicNotificationAllOf.name) &&
        Objects.equals(this.aggregation, basicNotificationAllOf.aggregation) &&
        Objects.equals(this.isIos, basicNotificationAllOf.isIos) &&
        Objects.equals(this.isAndroid, basicNotificationAllOf.isAndroid) &&
        Objects.equals(this.isHuawei, basicNotificationAllOf.isHuawei) &&
        Objects.equals(this.isAnyWeb, basicNotificationAllOf.isAnyWeb) &&
        Objects.equals(this.isChromeWeb, basicNotificationAllOf.isChromeWeb) &&
        Objects.equals(this.isFirefox, basicNotificationAllOf.isFirefox) &&
        Objects.equals(this.isSafari, basicNotificationAllOf.isSafari) &&
        Objects.equals(this.isWPWNS, basicNotificationAllOf.isWPWNS) &&
        Objects.equals(this.isAdm, basicNotificationAllOf.isAdm) &&
        Objects.equals(this.isChrome, basicNotificationAllOf.isChrome) &&
        Objects.equals(this.channelForExternalUserIds, basicNotificationAllOf.channelForExternalUserIds) &&
        Objects.equals(this.appId, basicNotificationAllOf.appId) &&
        Objects.equals(this.externalId, basicNotificationAllOf.externalId) &&
        Objects.equals(this.contents, basicNotificationAllOf.contents) &&
        Objects.equals(this.headings, basicNotificationAllOf.headings) &&
        Objects.equals(this.subtitle, basicNotificationAllOf.subtitle) &&
        Objects.equals(this.data, basicNotificationAllOf.data) &&
        Objects.equals(this.huaweiMsgType, basicNotificationAllOf.huaweiMsgType) &&
        Objects.equals(this.url, basicNotificationAllOf.url) &&
        Objects.equals(this.webUrl, basicNotificationAllOf.webUrl) &&
        Objects.equals(this.appUrl, basicNotificationAllOf.appUrl) &&
        Objects.equals(this.iosAttachments, basicNotificationAllOf.iosAttachments) &&
        Objects.equals(this.templateId, basicNotificationAllOf.templateId) &&
        Objects.equals(this.contentAvailable, basicNotificationAllOf.contentAvailable) &&
        Objects.equals(this.mutableContent, basicNotificationAllOf.mutableContent) &&
        Objects.equals(this.targetContentIdentifier, basicNotificationAllOf.targetContentIdentifier) &&
        Objects.equals(this.bigPicture, basicNotificationAllOf.bigPicture) &&
        Objects.equals(this.huaweiBigPicture, basicNotificationAllOf.huaweiBigPicture) &&
        Objects.equals(this.admBigPicture, basicNotificationAllOf.admBigPicture) &&
        Objects.equals(this.chromeBigPicture, basicNotificationAllOf.chromeBigPicture) &&
        Objects.equals(this.chromeWebImage, basicNotificationAllOf.chromeWebImage) &&
        Objects.equals(this.buttons, basicNotificationAllOf.buttons) &&
        Objects.equals(this.webButtons, basicNotificationAllOf.webButtons) &&
        Objects.equals(this.iosCategory, basicNotificationAllOf.iosCategory) &&
        Objects.equals(this.androidChannelId, basicNotificationAllOf.androidChannelId) &&
        Objects.equals(this.huaweiChannelId, basicNotificationAllOf.huaweiChannelId) &&
        Objects.equals(this.existingAndroidChannelId, basicNotificationAllOf.existingAndroidChannelId) &&
        Objects.equals(this.huaweiExistingChannelId, basicNotificationAllOf.huaweiExistingChannelId) &&
        Objects.equals(this.androidBackgroundLayout, basicNotificationAllOf.androidBackgroundLayout) &&
        Objects.equals(this.smallIcon, basicNotificationAllOf.smallIcon) &&
        Objects.equals(this.huaweiSmallIcon, basicNotificationAllOf.huaweiSmallIcon) &&
        Objects.equals(this.largeIcon, basicNotificationAllOf.largeIcon) &&
        Objects.equals(this.huaweiLargeIcon, basicNotificationAllOf.huaweiLargeIcon) &&
        Objects.equals(this.admSmallIcon, basicNotificationAllOf.admSmallIcon) &&
        Objects.equals(this.admLargeIcon, basicNotificationAllOf.admLargeIcon) &&
        Objects.equals(this.chromeWebIcon, basicNotificationAllOf.chromeWebIcon) &&
        Objects.equals(this.chromeWebBadge, basicNotificationAllOf.chromeWebBadge) &&
        Objects.equals(this.firefoxIcon, basicNotificationAllOf.firefoxIcon) &&
        Objects.equals(this.chromeIcon, basicNotificationAllOf.chromeIcon) &&
        Objects.equals(this.iosSound, basicNotificationAllOf.iosSound) &&
        Objects.equals(this.androidSound, basicNotificationAllOf.androidSound) &&
        Objects.equals(this.huaweiSound, basicNotificationAllOf.huaweiSound) &&
        Objects.equals(this.admSound, basicNotificationAllOf.admSound) &&
        Objects.equals(this.wpWnsSound, basicNotificationAllOf.wpWnsSound) &&
        Objects.equals(this.androidLedColor, basicNotificationAllOf.androidLedColor) &&
        Objects.equals(this.huaweiLedColor, basicNotificationAllOf.huaweiLedColor) &&
        Objects.equals(this.androidAccentColor, basicNotificationAllOf.androidAccentColor) &&
        Objects.equals(this.huaweiAccentColor, basicNotificationAllOf.huaweiAccentColor) &&
        Objects.equals(this.androidVisibility, basicNotificationAllOf.androidVisibility) &&
        Objects.equals(this.huaweiVisibility, basicNotificationAllOf.huaweiVisibility) &&
        Objects.equals(this.iosBadgeType, basicNotificationAllOf.iosBadgeType) &&
        Objects.equals(this.iosBadgeCount, basicNotificationAllOf.iosBadgeCount) &&
        Objects.equals(this.collapseId, basicNotificationAllOf.collapseId) &&
        Objects.equals(this.webPushTopic, basicNotificationAllOf.webPushTopic) &&
        Objects.equals(this.apnsAlert, basicNotificationAllOf.apnsAlert) &&
        Objects.equals(this.delayedOption, basicNotificationAllOf.delayedOption) &&
        Objects.equals(this.deliveryTimeOfDay, basicNotificationAllOf.deliveryTimeOfDay) &&
        Objects.equals(this.ttl, basicNotificationAllOf.ttl) &&
        Objects.equals(this.priority, basicNotificationAllOf.priority) &&
        Objects.equals(this.apnsPushTypeOverride, basicNotificationAllOf.apnsPushTypeOverride) &&
        Objects.equals(this.throttleRatePerMinute, basicNotificationAllOf.throttleRatePerMinute) &&
        Objects.equals(this.androidGroup, basicNotificationAllOf.androidGroup) &&
        Objects.equals(this.androidGroupMessage, basicNotificationAllOf.androidGroupMessage) &&
        Objects.equals(this.admGroup, basicNotificationAllOf.admGroup) &&
        Objects.equals(this.admGroupMessage, basicNotificationAllOf.admGroupMessage) &&
        Objects.equals(this.threadId, basicNotificationAllOf.threadId) &&
        Objects.equals(this.summaryArg, basicNotificationAllOf.summaryArg) &&
        Objects.equals(this.summaryArgCount, basicNotificationAllOf.summaryArgCount) &&
        Objects.equals(this.emailSubject, basicNotificationAllOf.emailSubject) &&
        Objects.equals(this.emailBody, basicNotificationAllOf.emailBody) &&
        Objects.equals(this.emailFromName, basicNotificationAllOf.emailFromName) &&
        Objects.equals(this.emailFromAddress, basicNotificationAllOf.emailFromAddress) &&
        Objects.equals(this.smsFrom, basicNotificationAllOf.smsFrom) &&
        Objects.equals(this.smsMediaUrls, basicNotificationAllOf.smsMediaUrls) &&
        Objects.equals(this.filters, basicNotificationAllOf.filters);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, value, name, aggregation, isIos, isAndroid, isHuawei, isAnyWeb, isChromeWeb, isFirefox, isSafari, isWPWNS, isAdm, isChrome, channelForExternalUserIds, appId, externalId, contents, headings, subtitle, data, huaweiMsgType, url, webUrl, appUrl, iosAttachments, templateId, contentAvailable, mutableContent, targetContentIdentifier, bigPicture, huaweiBigPicture, admBigPicture, chromeBigPicture, chromeWebImage, buttons, webButtons, iosCategory, androidChannelId, huaweiChannelId, existingAndroidChannelId, huaweiExistingChannelId, androidBackgroundLayout, smallIcon, huaweiSmallIcon, largeIcon, huaweiLargeIcon, admSmallIcon, admLargeIcon, chromeWebIcon, chromeWebBadge, firefoxIcon, chromeIcon, iosSound, androidSound, huaweiSound, admSound, wpWnsSound, androidLedColor, huaweiLedColor, androidAccentColor, huaweiAccentColor, androidVisibility, huaweiVisibility, iosBadgeType, iosBadgeCount, collapseId, webPushTopic, apnsAlert, delayedOption, deliveryTimeOfDay, ttl, priority, apnsPushTypeOverride, throttleRatePerMinute, androidGroup, androidGroupMessage, admGroup, admGroupMessage, threadId, summaryArg, summaryArgCount, emailSubject, emailBody, emailFromName, emailFromAddress, smsFrom, smsMediaUrls, filters);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BasicNotificationAllOf {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    aggregation: ").append(toIndentedString(aggregation)).append("\n");
    sb.append("    isIos: ").append(toIndentedString(isIos)).append("\n");
    sb.append("    isAndroid: ").append(toIndentedString(isAndroid)).append("\n");
    sb.append("    isHuawei: ").append(toIndentedString(isHuawei)).append("\n");
    sb.append("    isAnyWeb: ").append(toIndentedString(isAnyWeb)).append("\n");
    sb.append("    isChromeWeb: ").append(toIndentedString(isChromeWeb)).append("\n");
    sb.append("    isFirefox: ").append(toIndentedString(isFirefox)).append("\n");
    sb.append("    isSafari: ").append(toIndentedString(isSafari)).append("\n");
    sb.append("    isWPWNS: ").append(toIndentedString(isWPWNS)).append("\n");
    sb.append("    isAdm: ").append(toIndentedString(isAdm)).append("\n");
    sb.append("    isChrome: ").append(toIndentedString(isChrome)).append("\n");
    sb.append("    channelForExternalUserIds: ").append(toIndentedString(channelForExternalUserIds)).append("\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    contents: ").append(toIndentedString(contents)).append("\n");
    sb.append("    headings: ").append(toIndentedString(headings)).append("\n");
    sb.append("    subtitle: ").append(toIndentedString(subtitle)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    huaweiMsgType: ").append(toIndentedString(huaweiMsgType)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    webUrl: ").append(toIndentedString(webUrl)).append("\n");
    sb.append("    appUrl: ").append(toIndentedString(appUrl)).append("\n");
    sb.append("    iosAttachments: ").append(toIndentedString(iosAttachments)).append("\n");
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    contentAvailable: ").append(toIndentedString(contentAvailable)).append("\n");
    sb.append("    mutableContent: ").append(toIndentedString(mutableContent)).append("\n");
    sb.append("    targetContentIdentifier: ").append(toIndentedString(targetContentIdentifier)).append("\n");
    sb.append("    bigPicture: ").append(toIndentedString(bigPicture)).append("\n");
    sb.append("    huaweiBigPicture: ").append(toIndentedString(huaweiBigPicture)).append("\n");
    sb.append("    admBigPicture: ").append(toIndentedString(admBigPicture)).append("\n");
    sb.append("    chromeBigPicture: ").append(toIndentedString(chromeBigPicture)).append("\n");
    sb.append("    chromeWebImage: ").append(toIndentedString(chromeWebImage)).append("\n");
    sb.append("    buttons: ").append(toIndentedString(buttons)).append("\n");
    sb.append("    webButtons: ").append(toIndentedString(webButtons)).append("\n");
    sb.append("    iosCategory: ").append(toIndentedString(iosCategory)).append("\n");
    sb.append("    androidChannelId: ").append(toIndentedString(androidChannelId)).append("\n");
    sb.append("    huaweiChannelId: ").append(toIndentedString(huaweiChannelId)).append("\n");
    sb.append("    existingAndroidChannelId: ").append(toIndentedString(existingAndroidChannelId)).append("\n");
    sb.append("    huaweiExistingChannelId: ").append(toIndentedString(huaweiExistingChannelId)).append("\n");
    sb.append("    androidBackgroundLayout: ").append(toIndentedString(androidBackgroundLayout)).append("\n");
    sb.append("    smallIcon: ").append(toIndentedString(smallIcon)).append("\n");
    sb.append("    huaweiSmallIcon: ").append(toIndentedString(huaweiSmallIcon)).append("\n");
    sb.append("    largeIcon: ").append(toIndentedString(largeIcon)).append("\n");
    sb.append("    huaweiLargeIcon: ").append(toIndentedString(huaweiLargeIcon)).append("\n");
    sb.append("    admSmallIcon: ").append(toIndentedString(admSmallIcon)).append("\n");
    sb.append("    admLargeIcon: ").append(toIndentedString(admLargeIcon)).append("\n");
    sb.append("    chromeWebIcon: ").append(toIndentedString(chromeWebIcon)).append("\n");
    sb.append("    chromeWebBadge: ").append(toIndentedString(chromeWebBadge)).append("\n");
    sb.append("    firefoxIcon: ").append(toIndentedString(firefoxIcon)).append("\n");
    sb.append("    chromeIcon: ").append(toIndentedString(chromeIcon)).append("\n");
    sb.append("    iosSound: ").append(toIndentedString(iosSound)).append("\n");
    sb.append("    androidSound: ").append(toIndentedString(androidSound)).append("\n");
    sb.append("    huaweiSound: ").append(toIndentedString(huaweiSound)).append("\n");
    sb.append("    admSound: ").append(toIndentedString(admSound)).append("\n");
    sb.append("    wpWnsSound: ").append(toIndentedString(wpWnsSound)).append("\n");
    sb.append("    androidLedColor: ").append(toIndentedString(androidLedColor)).append("\n");
    sb.append("    huaweiLedColor: ").append(toIndentedString(huaweiLedColor)).append("\n");
    sb.append("    androidAccentColor: ").append(toIndentedString(androidAccentColor)).append("\n");
    sb.append("    huaweiAccentColor: ").append(toIndentedString(huaweiAccentColor)).append("\n");
    sb.append("    androidVisibility: ").append(toIndentedString(androidVisibility)).append("\n");
    sb.append("    huaweiVisibility: ").append(toIndentedString(huaweiVisibility)).append("\n");
    sb.append("    iosBadgeType: ").append(toIndentedString(iosBadgeType)).append("\n");
    sb.append("    iosBadgeCount: ").append(toIndentedString(iosBadgeCount)).append("\n");
    sb.append("    collapseId: ").append(toIndentedString(collapseId)).append("\n");
    sb.append("    webPushTopic: ").append(toIndentedString(webPushTopic)).append("\n");
    sb.append("    apnsAlert: ").append(toIndentedString(apnsAlert)).append("\n");
    sb.append("    delayedOption: ").append(toIndentedString(delayedOption)).append("\n");
    sb.append("    deliveryTimeOfDay: ").append(toIndentedString(deliveryTimeOfDay)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    apnsPushTypeOverride: ").append(toIndentedString(apnsPushTypeOverride)).append("\n");
    sb.append("    throttleRatePerMinute: ").append(toIndentedString(throttleRatePerMinute)).append("\n");
    sb.append("    androidGroup: ").append(toIndentedString(androidGroup)).append("\n");
    sb.append("    androidGroupMessage: ").append(toIndentedString(androidGroupMessage)).append("\n");
    sb.append("    admGroup: ").append(toIndentedString(admGroup)).append("\n");
    sb.append("    admGroupMessage: ").append(toIndentedString(admGroupMessage)).append("\n");
    sb.append("    threadId: ").append(toIndentedString(threadId)).append("\n");
    sb.append("    summaryArg: ").append(toIndentedString(summaryArg)).append("\n");
    sb.append("    summaryArgCount: ").append(toIndentedString(summaryArgCount)).append("\n");
    sb.append("    emailSubject: ").append(toIndentedString(emailSubject)).append("\n");
    sb.append("    emailBody: ").append(toIndentedString(emailBody)).append("\n");
    sb.append("    emailFromName: ").append(toIndentedString(emailFromName)).append("\n");
    sb.append("    emailFromAddress: ").append(toIndentedString(emailFromAddress)).append("\n");
    sb.append("    smsFrom: ").append(toIndentedString(smsFrom)).append("\n");
    sb.append("    smsMediaUrls: ").append(toIndentedString(smsMediaUrls)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("value");
    openapiFields.add("name");
    openapiFields.add("aggregation");
    openapiFields.add("isIos");
    openapiFields.add("isAndroid");
    openapiFields.add("isHuawei");
    openapiFields.add("isAnyWeb");
    openapiFields.add("isChromeWeb");
    openapiFields.add("isFirefox");
    openapiFields.add("isSafari");
    openapiFields.add("isWP_WNS");
    openapiFields.add("isAdm");
    openapiFields.add("isChrome");
    openapiFields.add("channel_for_external_user_ids");
    openapiFields.add("app_id");
    openapiFields.add("external_id");
    openapiFields.add("contents");
    openapiFields.add("headings");
    openapiFields.add("subtitle");
    openapiFields.add("data");
    openapiFields.add("huawei_msg_type");
    openapiFields.add("url");
    openapiFields.add("web_url");
    openapiFields.add("app_url");
    openapiFields.add("ios_attachments");
    openapiFields.add("template_id");
    openapiFields.add("content_available");
    openapiFields.add("mutable_content");
    openapiFields.add("target_content_identifier");
    openapiFields.add("big_picture");
    openapiFields.add("huawei_big_picture");
    openapiFields.add("adm_big_picture");
    openapiFields.add("chrome_big_picture");
    openapiFields.add("chrome_web_image");
    openapiFields.add("buttons");
    openapiFields.add("web_buttons");
    openapiFields.add("ios_category");
    openapiFields.add("android_channel_id");
    openapiFields.add("huawei_channel_id");
    openapiFields.add("existing_android_channel_id");
    openapiFields.add("huawei_existing_channel_id");
    openapiFields.add("android_background_layout");
    openapiFields.add("small_icon");
    openapiFields.add("huawei_small_icon");
    openapiFields.add("large_icon");
    openapiFields.add("huawei_large_icon");
    openapiFields.add("adm_small_icon");
    openapiFields.add("adm_large_icon");
    openapiFields.add("chrome_web_icon");
    openapiFields.add("chrome_web_badge");
    openapiFields.add("firefox_icon");
    openapiFields.add("chrome_icon");
    openapiFields.add("ios_sound");
    openapiFields.add("android_sound");
    openapiFields.add("huawei_sound");
    openapiFields.add("adm_sound");
    openapiFields.add("wp_wns_sound");
    openapiFields.add("android_led_color");
    openapiFields.add("huawei_led_color");
    openapiFields.add("android_accent_color");
    openapiFields.add("huawei_accent_color");
    openapiFields.add("android_visibility");
    openapiFields.add("huawei_visibility");
    openapiFields.add("ios_badgeType");
    openapiFields.add("ios_badgeCount");
    openapiFields.add("collapse_id");
    openapiFields.add("web_push_topic");
    openapiFields.add("apns_alert");
    openapiFields.add("delayed_option");
    openapiFields.add("delivery_time_of_day");
    openapiFields.add("ttl");
    openapiFields.add("priority");
    openapiFields.add("apns_push_type_override");
    openapiFields.add("throttle_rate_per_minute");
    openapiFields.add("android_group");
    openapiFields.add("android_group_message");
    openapiFields.add("adm_group");
    openapiFields.add("adm_group_message");
    openapiFields.add("thread_id");
    openapiFields.add("summary_arg");
    openapiFields.add("summary_arg_count");
    openapiFields.add("email_subject");
    openapiFields.add("email_body");
    openapiFields.add("email_from_name");
    openapiFields.add("email_from_address");
    openapiFields.add("sms_from");
    openapiFields.add("sms_media_urls");
    openapiFields.add("filters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BasicNotificationAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BasicNotificationAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BasicNotificationAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BasicNotificationAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<BasicNotificationAllOf>() {
           @Override
           public void write(JsonWriter out, BasicNotificationAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BasicNotificationAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();

             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BasicNotificationAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BasicNotificationAllOf
  * @throws IOException if the JSON string is invalid with respect to BasicNotificationAllOf
  */
  public static BasicNotificationAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BasicNotificationAllOf.class);
  }

 /**
  * Convert an instance of BasicNotificationAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


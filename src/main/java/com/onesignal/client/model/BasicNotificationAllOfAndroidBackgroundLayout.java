/*
 * OneSignal
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: devrel@onesignal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onesignal.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.onesignal.client.JSON;

/**
 * Channel: Push Notifications Platform: Android Allowing setting a background image for the notification. This is a JSON object containing the following keys. See our Background Image documentation for image sizes. 
 */
@ApiModel(description = "Channel: Push Notifications Platform: Android Allowing setting a background image for the notification. This is a JSON object containing the following keys. See our Background Image documentation for image sizes. ")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-01T23:27:12.168Z[Etc/UTC]")
public class BasicNotificationAllOfAndroidBackgroundLayout {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_HEADINGS_COLOR = "headings_color";
  @SerializedName(SERIALIZED_NAME_HEADINGS_COLOR)
  private String headingsColor;

  public static final String SERIALIZED_NAME_CONTENTS_COLOR = "contents_color";
  @SerializedName(SERIALIZED_NAME_CONTENTS_COLOR)
  private String contentsColor;

  public BasicNotificationAllOfAndroidBackgroundLayout() { 
  }

  public BasicNotificationAllOfAndroidBackgroundLayout image(String image) {
    
    this.image = image;
    return this;
  }

   /**
   * Asset file, android resource name, or URL to remote image.
   * @return image
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Asset file, android resource name, or URL to remote image.")

  public String getImage() {
    return image;
  }


  public void setImage(String image) {
    this.image = image;
  }


  public BasicNotificationAllOfAndroidBackgroundLayout headingsColor(String headingsColor) {
    
    this.headingsColor = headingsColor;
    return this;
  }

   /**
   * Title text color ARGB Hex format. Example(Blue) \&quot;FF0000FF\&quot;.
   * @return headingsColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Title text color ARGB Hex format. Example(Blue) \"FF0000FF\".")

  public String getHeadingsColor() {
    return headingsColor;
  }


  public void setHeadingsColor(String headingsColor) {
    this.headingsColor = headingsColor;
  }


  public BasicNotificationAllOfAndroidBackgroundLayout contentsColor(String contentsColor) {
    
    this.contentsColor = contentsColor;
    return this;
  }

   /**
   * Body text color ARGB Hex format. Example(Red) \&quot;FFFF0000\&quot;.
   * @return contentsColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Body text color ARGB Hex format. Example(Red) \"FFFF0000\".")

  public String getContentsColor() {
    return contentsColor;
  }


  public void setContentsColor(String contentsColor) {
    this.contentsColor = contentsColor;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BasicNotificationAllOfAndroidBackgroundLayout basicNotificationAllOfAndroidBackgroundLayout = (BasicNotificationAllOfAndroidBackgroundLayout) o;
    return Objects.equals(this.image, basicNotificationAllOfAndroidBackgroundLayout.image) &&
        Objects.equals(this.headingsColor, basicNotificationAllOfAndroidBackgroundLayout.headingsColor) &&
        Objects.equals(this.contentsColor, basicNotificationAllOfAndroidBackgroundLayout.contentsColor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(image, headingsColor, contentsColor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BasicNotificationAllOfAndroidBackgroundLayout {\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    headingsColor: ").append(toIndentedString(headingsColor)).append("\n");
    sb.append("    contentsColor: ").append(toIndentedString(contentsColor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("image");
    openapiFields.add("headings_color");
    openapiFields.add("contents_color");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BasicNotificationAllOfAndroidBackgroundLayout.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BasicNotificationAllOfAndroidBackgroundLayout' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BasicNotificationAllOfAndroidBackgroundLayout> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BasicNotificationAllOfAndroidBackgroundLayout.class));

       return (TypeAdapter<T>) new TypeAdapter<BasicNotificationAllOfAndroidBackgroundLayout>() {
           @Override
           public void write(JsonWriter out, BasicNotificationAllOfAndroidBackgroundLayout value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BasicNotificationAllOfAndroidBackgroundLayout read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();

             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BasicNotificationAllOfAndroidBackgroundLayout given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BasicNotificationAllOfAndroidBackgroundLayout
  * @throws IOException if the JSON string is invalid with respect to BasicNotificationAllOfAndroidBackgroundLayout
  */
  public static BasicNotificationAllOfAndroidBackgroundLayout fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BasicNotificationAllOfAndroidBackgroundLayout.class);
  }

 /**
  * Convert an instance of BasicNotificationAllOfAndroidBackgroundLayout to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * OneSignal
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: devrel@onesignal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onesignal.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.onesignal.client.JSON;

/**
 * CustomEvent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CustomEvent {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "external_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_ONESIGNAL_ID = "onesignal_id";
  @SerializedName(SERIALIZED_NAME_ONESIGNAL_ID)
  private String onesignalId;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_PAYLOAD = "payload";
  @SerializedName(SERIALIZED_NAME_PAYLOAD)
  private Map<String, Object> payload = null;

  public CustomEvent() { 
  }

  public CustomEvent name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The identifier or name of the event. Maximum 128 characters.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The identifier or name of the event. Maximum 128 characters.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public CustomEvent externalId(String externalId) {
    
    this.externalId = externalId;
    return this;
  }

   /**
   * The external ID of the user targeted for the event. Either the user&#39;s External ID or OneSignal ID is required.
   * @return externalId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The external ID of the user targeted for the event. Either the user's External ID or OneSignal ID is required.")

  public String getExternalId() {
    return externalId;
  }


  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  public CustomEvent onesignalId(String onesignalId) {
    
    this.onesignalId = onesignalId;
    return this;
  }

   /**
   * The OneSignal ID of the user targeted for the event. Either the user&#39;s External ID or OneSignal ID is required.
   * @return onesignalId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The OneSignal ID of the user targeted for the event. Either the user's External ID or OneSignal ID is required.")

  public String getOnesignalId() {
    return onesignalId;
  }


  public void setOnesignalId(String onesignalId) {
    this.onesignalId = onesignalId;
  }


  public CustomEvent timestamp(OffsetDateTime timestamp) {
    
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Time the event occurred as an ISO8601 formatted string. Defaults to now if not included or past date provided.
   * @return timestamp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Time the event occurred as an ISO8601 formatted string. Defaults to now if not included or past date provided.")

  public OffsetDateTime getTimestamp() {
    return timestamp;
  }


  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public CustomEvent payload(Map<String, Object> payload) {
    
    this.payload = payload;
    return this;
  }

  public CustomEvent putPayloadItem(String key, Object payloadItem) {
    if (this.payload == null) {
      this.payload = new HashMap<>();
    }
    this.payload.put(key, payloadItem);
    return this;
  }

   /**
   * Properties or data related to the event, like {\&quot;geography\&quot;: \&quot;USA\&quot;}
   * @return payload
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Properties or data related to the event, like {\"geography\": \"USA\"}")

  public Map<String, Object> getPayload() {
    return payload;
  }


  public void setPayload(Map<String, Object> payload) {
    this.payload = payload;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomEvent customEvent = (CustomEvent) o;
    return Objects.equals(this.name, customEvent.name) &&
        Objects.equals(this.externalId, customEvent.externalId) &&
        Objects.equals(this.onesignalId, customEvent.onesignalId) &&
        Objects.equals(this.timestamp, customEvent.timestamp) &&
        Objects.equals(this.payload, customEvent.payload);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, externalId, onesignalId, timestamp, payload);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomEvent {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    onesignalId: ").append(toIndentedString(onesignalId)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    payload: ").append(toIndentedString(payload)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("external_id");
    openapiFields.add("onesignal_id");
    openapiFields.add("timestamp");
    openapiFields.add("payload");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomEvent>() {
           @Override
           public void write(JsonWriter out, CustomEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomEvent read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();

             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomEvent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomEvent
  * @throws IOException if the JSON string is invalid with respect to CustomEvent
  */
  public static CustomEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomEvent.class);
  }

 /**
  * Convert an instance of CustomEvent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * OneSignal
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: devrel@onesignal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onesignal.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.onesignal.client.model.PropertiesObject;
import com.onesignal.client.model.SubscriptionObject;
import com.onesignal.client.model.UserSubscriptionOptions;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.onesignal.client.JSON;

/**
 * User
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-01T23:27:12.168Z[Etc/UTC]")
public class User {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private PropertiesObject properties;

  public static final String SERIALIZED_NAME_IDENTITY = "identity";
  @SerializedName(SERIALIZED_NAME_IDENTITY)
  private Map<String, Object> identity = null;

  public static final String SERIALIZED_NAME_SUBSCRIPTIONS = "subscriptions";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTIONS)
  private List<SubscriptionObject> subscriptions = null;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_OPTIONS = "subscription_options";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_OPTIONS)
  private UserSubscriptionOptions subscriptionOptions;

  public User() { 
  }

  public User properties(PropertiesObject properties) {
    
    this.properties = properties;
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PropertiesObject getProperties() {
    return properties;
  }


  public void setProperties(PropertiesObject properties) {
    this.properties = properties;
  }


  public User identity(Map<String, Object> identity) {
    
    this.identity = identity;
    return this;
  }

  public User putIdentityItem(String key, Object identityItem) {
    if (this.identity == null) {
      this.identity = new HashMap<>();
    }
    this.identity.put(key, identityItem);
    return this;
  }

   /**
   * Get identity
   * @return identity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, Object> getIdentity() {
    return identity;
  }


  public void setIdentity(Map<String, Object> identity) {
    this.identity = identity;
  }


  public User subscriptions(List<SubscriptionObject> subscriptions) {
    
    this.subscriptions = subscriptions;
    return this;
  }

  public User addSubscriptionsItem(SubscriptionObject subscriptionsItem) {
    if (this.subscriptions == null) {
      this.subscriptions = new ArrayList<>();
    }
    this.subscriptions.add(subscriptionsItem);
    return this;
  }

   /**
   * Get subscriptions
   * @return subscriptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<SubscriptionObject> getSubscriptions() {
    return subscriptions;
  }


  public void setSubscriptions(List<SubscriptionObject> subscriptions) {
    this.subscriptions = subscriptions;
  }


  public User subscriptionOptions(UserSubscriptionOptions subscriptionOptions) {
    
    this.subscriptionOptions = subscriptionOptions;
    return this;
  }

   /**
   * Get subscriptionOptions
   * @return subscriptionOptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UserSubscriptionOptions getSubscriptionOptions() {
    return subscriptionOptions;
  }


  public void setSubscriptionOptions(UserSubscriptionOptions subscriptionOptions) {
    this.subscriptionOptions = subscriptionOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    User user = (User) o;
    return Objects.equals(this.properties, user.properties) &&
        Objects.equals(this.identity, user.identity) &&
        Objects.equals(this.subscriptions, user.subscriptions) &&
        Objects.equals(this.subscriptionOptions, user.subscriptionOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(properties, identity, subscriptions, subscriptionOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class User {\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    identity: ").append(toIndentedString(identity)).append("\n");
    sb.append("    subscriptions: ").append(toIndentedString(subscriptions)).append("\n");
    sb.append("    subscriptionOptions: ").append(toIndentedString(subscriptionOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("properties");
    openapiFields.add("identity");
    openapiFields.add("subscriptions");
    openapiFields.add("subscription_options");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!User.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'User' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<User> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(User.class));

       return (TypeAdapter<T>) new TypeAdapter<User>() {
           @Override
           public void write(JsonWriter out, User value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public User read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();

             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of User given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of User
  * @throws IOException if the JSON string is invalid with respect to User
  */
  public static User fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, User.class);
  }

 /**
  * Convert an instance of User to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

